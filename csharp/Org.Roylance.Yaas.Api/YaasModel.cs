// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaas_model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Roylance.Yaas {

  /// <summary>Holder for reflection information generated from yaas_model.proto</summary>
  public static partial class YaasModelReflection {

    #region Descriptor
    /// <summary>File descriptor for yaas_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YaasModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB5YWFzX21vZGVsLnByb3RvEhFvcmcucm95bGFuY2UueWFhcyKtAQoKVXNl",
            "ckRldmljZRIKCgJpZBgBIAEoCRI7ChB1c2VyX2RldmljZV90eXBlGAIgASgO",
            "MiEub3JnLnJveWxhbmNlLnlhYXMuVXNlckRldmljZVR5cGUSGQoRdXNlcl9k",
            "ZXZpY2VfdG9rZW4YAyABKAkSFAoMbGFzdF91cGRhdGVkGAQgASgDEiUKBHVz",
            "ZXIYBSABKAsyFy5vcmcucm95bGFuY2UueWFhcy5Vc2VyIjcKBUltYWdlEgoK",
            "AmlkGAEgASgJEgwKBG5hbWUYAiABKAkSFAoMYWN0dWFsX2ltYWdlGAMgASgJ",
            "IsQBCgRVc2VyEgoKAmlkGAEgASgJEhEKCXVzZXJfbmFtZRgCIAEoCRIQCghw",
            "YXNzd29yZBgDIAEoCRIPCgdkaXNwbGF5GAQgASgJEhIKCmZpcnN0X25hbWUY",
            "BSABKAkSEQoJbGFzdF9uYW1lGAYgASgJEicKBWltYWdlGAcgASgLMhgub3Jn",
            "LnJveWxhbmNlLnlhYXMuSW1hZ2USKgoFcm9sZXMYCCADKA4yGy5vcmcucm95",
            "bGFuY2UueWFhcy5Vc2VyUm9sZSJICgVUb2tlbhIKCgJpZBgBIAEoCRIPCgd1",
            "c2VyX2lkGAIgASgJEg4KBmlzc3VlZBgDIAEoAxISCgpleHBpcmF0aW9uGAQg",
            "ASgDIm4KEFVJQXV0aGVudGljYXRpb24SFQoNYXV0aGVudGljYXRlZBgBIAEo",
            "CBINCgV0b2tlbhgCIAEoCRIRCgl1c2VyX25hbWUYAyABKAkSDwoHZGlzcGxh",
            "eRgEIAEoCRIQCghpc19hZG1pbhgFIAEoCCJRChBVSUNoYW5nZVBhc3N3b3Jk",
            "EhEKCXVzZXJfbmFtZRgBIAEoCRIUCgxvbGRfcGFzc3dvcmQYAiABKAkSFAoM",
            "bmV3X3Bhc3N3b3JkGAMgASgJIpACCg1VSVlhYXNSZXF1ZXN0Eg0KBXRva2Vu",
            "GAEgASgJEg8KB2NvbnRlbnQYAiABKAkSJQoEdXNlchgDIAEoCzIXLm9yZy5y",
            "b3lsYW5jZS55YWFzLlVzZXISMgoLdXNlcl9kZXZpY2UYBCABKAsyHS5vcmcu",
            "cm95bGFuY2UueWFhcy5Vc2VyRGV2aWNlEicKBWltYWdlGAUgASgLMhgub3Jn",
            "LnJveWxhbmNlLnlhYXMuSW1hZ2USDgoGb2Zmc2V0GAYgASgFEg0KBWxpbWl0",
            "GAcgASgFEjwKD2NoYW5nZV9wYXNzd29yZBgIIAEoCzIjLm9yZy5yb3lsYW5j",
            "ZS55YWFzLlVJQ2hhbmdlUGFzc3dvcmQikgIKDlVJWWFhc1Jlc3BvbnNlEhUK",
            "DWF1dGhlbnRpY2F0ZWQYASABKAgSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCRIS",
            "CgpzdWNjZXNzZnVsGAMgASgIEg8KB2NvbnRlbnQYBCABKAkSEAoIaXNfYWRt",
            "aW4YBSABKAgSMQoEdXNlchgGIAEoCzIjLm9yZy5yb3lsYW5jZS55YWFzLlVJ",
            "QXV0aGVudGljYXRpb24SMwoFdXNlcnMYByABKAsyJC5vcmcucm95bGFuY2Uu",
            "eWFhcy5VSUF1dGhlbnRpY2F0aW9ucxIzCgx1c2VyX2RldmljZXMYCCADKAsy",
            "HS5vcmcucm95bGFuY2UueWFhcy5Vc2VyRGV2aWNlIkcKEVVJQXV0aGVudGlj",
            "YXRpb25zEjIKBXVzZXJzGAEgAygLMiMub3JnLnJveWxhbmNlLnlhYXMuVUlB",
            "dXRoZW50aWNhdGlvbio2Cg5Vc2VyRGV2aWNlVHlwZRILCgdBTkRST0lEEAAS",
            "BwoDSU9TEAESDgoKSkFWQVNDUklQVBACKiEKCFVzZXJSb2xlEgoKBk5PUk1B",
            "TBAAEgkKBUFETUlOEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Org.Roylance.Yaas.UserDeviceType), typeof(global::Org.Roylance.Yaas.UserRole), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UserDevice), global::Org.Roylance.Yaas.UserDevice.Parser, new[]{ "Id", "UserDeviceType", "UserDeviceToken", "LastUpdated", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.Image), global::Org.Roylance.Yaas.Image.Parser, new[]{ "Id", "Name", "ActualImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.User), global::Org.Roylance.Yaas.User.Parser, new[]{ "Id", "UserName", "Password", "Display", "FirstName", "LastName", "Image", "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.Token), global::Org.Roylance.Yaas.Token.Parser, new[]{ "Id", "UserId", "Issued", "Expiration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UIAuthentication), global::Org.Roylance.Yaas.UIAuthentication.Parser, new[]{ "Authenticated", "Token", "UserName", "Display", "IsAdmin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UIChangePassword), global::Org.Roylance.Yaas.UIChangePassword.Parser, new[]{ "UserName", "OldPassword", "NewPassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UIYaasRequest), global::Org.Roylance.Yaas.UIYaasRequest.Parser, new[]{ "Token", "Content", "User", "UserDevice", "Image", "Offset", "Limit", "ChangePassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UIYaasResponse), global::Org.Roylance.Yaas.UIYaasResponse.Parser, new[]{ "Authenticated", "ErrorMessage", "Successful", "Content", "IsAdmin", "User", "Users", "UserDevices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaas.UIAuthentications), global::Org.Roylance.Yaas.UIAuthentications.Parser, new[]{ "Users" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum UserDeviceType {
    [pbr::OriginalName("ANDROID")] Android = 0,
    [pbr::OriginalName("IOS")] Ios = 1,
    [pbr::OriginalName("JAVASCRIPT")] Javascript = 2,
  }

  public enum UserRole {
    [pbr::OriginalName("NORMAL")] Normal = 0,
    [pbr::OriginalName("ADMIN")] Admin = 1,
  }

  #endregion

  #region Messages
  public sealed partial class UserDevice : pb::IMessage<UserDevice> {
    private static readonly pb::MessageParser<UserDevice> _parser = new pb::MessageParser<UserDevice>(() => new UserDevice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDevice(UserDevice other) : this() {
      id_ = other.id_;
      userDeviceType_ = other.userDeviceType_;
      userDeviceToken_ = other.userDeviceToken_;
      lastUpdated_ = other.lastUpdated_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDevice Clone() {
      return new UserDevice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_device_type" field.</summary>
    public const int UserDeviceTypeFieldNumber = 2;
    private global::Org.Roylance.Yaas.UserDeviceType userDeviceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.UserDeviceType UserDeviceType {
      get { return userDeviceType_; }
      set {
        userDeviceType_ = value;
      }
    }

    /// <summary>Field number for the "user_device_token" field.</summary>
    public const int UserDeviceTokenFieldNumber = 3;
    private string userDeviceToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserDeviceToken {
      get { return userDeviceToken_; }
      set {
        userDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_updated" field.</summary>
    public const int LastUpdatedFieldNumber = 4;
    private long lastUpdated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdated {
      get { return lastUpdated_; }
      set {
        lastUpdated_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 5;
    private global::Org.Roylance.Yaas.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserDeviceType != other.UserDeviceType) return false;
      if (UserDeviceToken != other.UserDeviceToken) return false;
      if (LastUpdated != other.LastUpdated) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserDeviceType != 0) hash ^= UserDeviceType.GetHashCode();
      if (UserDeviceToken.Length != 0) hash ^= UserDeviceToken.GetHashCode();
      if (LastUpdated != 0L) hash ^= LastUpdated.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserDeviceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UserDeviceType);
      }
      if (UserDeviceToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserDeviceToken);
      }
      if (LastUpdated != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastUpdated);
      }
      if (user_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserDeviceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserDeviceType);
      }
      if (UserDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDeviceToken);
      }
      if (LastUpdated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdated);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserDeviceType != 0) {
        UserDeviceType = other.UserDeviceType;
      }
      if (other.UserDeviceToken.Length != 0) {
        UserDeviceToken = other.UserDeviceToken;
      }
      if (other.LastUpdated != 0L) {
        LastUpdated = other.LastUpdated;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Org.Roylance.Yaas.User();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            userDeviceType_ = (global::Org.Roylance.Yaas.UserDeviceType) input.ReadEnum();
            break;
          }
          case 26: {
            UserDeviceToken = input.ReadString();
            break;
          }
          case 32: {
            LastUpdated = input.ReadInt64();
            break;
          }
          case 42: {
            if (user_ == null) {
              user_ = new global::Org.Roylance.Yaas.User();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      actualImage_ = other.actualImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actual_image" field.</summary>
    public const int ActualImageFieldNumber = 3;
    private string actualImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActualImage {
      get { return actualImage_; }
      set {
        actualImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ActualImage != other.ActualImage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ActualImage.Length != 0) hash ^= ActualImage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ActualImage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ActualImage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ActualImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActualImage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ActualImage.Length != 0) {
        ActualImage = other.ActualImage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ActualImage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      password_ = other.password_;
      display_ = other.display_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      Image = other.image_ != null ? other.Image.Clone() : null;
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 4;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 5;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 6;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 7;
    private global::Org.Roylance.Yaas.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaas.UserRole> _repeated_roles_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::Org.Roylance.Yaas.UserRole) x);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaas.UserRole> roles_ = new pbc::RepeatedField<global::Org.Roylance.Yaas.UserRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaas.UserRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (Display != other.Display) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Display);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LastName);
      }
      if (image_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Image);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Org.Roylance.Yaas.Image();
        }
        Image.MergeFrom(other.Image);
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Display = input.ReadString();
            break;
          }
          case 42: {
            FirstName = input.ReadString();
            break;
          }
          case 50: {
            LastName = input.ReadString();
            break;
          }
          case 58: {
            if (image_ == null) {
              image_ = new global::Org.Roylance.Yaas.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 66:
          case 64: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      issued_ = other.issued_;
      expiration_ = other.expiration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issued" field.</summary>
    public const int IssuedFieldNumber = 3;
    private long issued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Issued {
      get { return issued_; }
      set {
        issued_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 4;
    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (Issued != other.Issued) return false;
      if (Expiration != other.Expiration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Issued != 0L) hash ^= Issued.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (Issued != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Issued);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Expiration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Issued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Issued);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Issued != 0L) {
        Issued = other.Issued;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 24: {
            Issued = input.ReadInt64();
            break;
          }
          case 32: {
            Expiration = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIAuthentication : pb::IMessage<UIAuthentication> {
    private static readonly pb::MessageParser<UIAuthentication> _parser = new pb::MessageParser<UIAuthentication>(() => new UIAuthentication());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIAuthentication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentication(UIAuthentication other) : this() {
      authenticated_ = other.authenticated_;
      token_ = other.token_;
      userName_ = other.userName_;
      display_ = other.display_;
      isAdmin_ = other.isAdmin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentication Clone() {
      return new UIAuthentication(this);
    }

    /// <summary>Field number for the "authenticated" field.</summary>
    public const int AuthenticatedFieldNumber = 1;
    private bool authenticated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authenticated {
      get { return authenticated_; }
      set {
        authenticated_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 4;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_admin" field.</summary>
    public const int IsAdminFieldNumber = 5;
    private bool isAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIAuthentication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIAuthentication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authenticated != other.Authenticated) return false;
      if (Token != other.Token) return false;
      if (UserName != other.UserName) return false;
      if (Display != other.Display) return false;
      if (IsAdmin != other.IsAdmin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Authenticated != false) hash ^= Authenticated.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Authenticated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Authenticated);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Display);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAdmin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Authenticated != false) {
        size += 1 + 1;
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIAuthentication other) {
      if (other == null) {
        return;
      }
      if (other.Authenticated != false) {
        Authenticated = other.Authenticated;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Authenticated = input.ReadBool();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            Display = input.ReadString();
            break;
          }
          case 40: {
            IsAdmin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIChangePassword : pb::IMessage<UIChangePassword> {
    private static readonly pb::MessageParser<UIChangePassword> _parser = new pb::MessageParser<UIChangePassword>(() => new UIChangePassword());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIChangePassword> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIChangePassword() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIChangePassword(UIChangePassword other) : this() {
      userName_ = other.userName_;
      oldPassword_ = other.oldPassword_;
      newPassword_ = other.newPassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIChangePassword Clone() {
      return new UIChangePassword(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_password" field.</summary>
    public const int OldPasswordFieldNumber = 2;
    private string oldPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldPassword {
      get { return oldPassword_; }
      set {
        oldPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_password" field.</summary>
    public const int NewPasswordFieldNumber = 3;
    private string newPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewPassword {
      get { return newPassword_; }
      set {
        newPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIChangePassword);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIChangePassword other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (OldPassword != other.OldPassword) return false;
      if (NewPassword != other.NewPassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (OldPassword.Length != 0) hash ^= OldPassword.GetHashCode();
      if (NewPassword.Length != 0) hash ^= NewPassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (OldPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldPassword);
      }
      if (NewPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (OldPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldPassword);
      }
      if (NewPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIChangePassword other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.OldPassword.Length != 0) {
        OldPassword = other.OldPassword;
      }
      if (other.NewPassword.Length != 0) {
        NewPassword = other.NewPassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            OldPassword = input.ReadString();
            break;
          }
          case 26: {
            NewPassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIYaasRequest : pb::IMessage<UIYaasRequest> {
    private static readonly pb::MessageParser<UIYaasRequest> _parser = new pb::MessageParser<UIYaasRequest>(() => new UIYaasRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYaasRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasRequest(UIYaasRequest other) : this() {
      token_ = other.token_;
      content_ = other.content_;
      User = other.user_ != null ? other.User.Clone() : null;
      UserDevice = other.userDevice_ != null ? other.UserDevice.Clone() : null;
      Image = other.image_ != null ? other.Image.Clone() : null;
      offset_ = other.offset_;
      limit_ = other.limit_;
      ChangePassword = other.changePassword_ != null ? other.ChangePassword.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasRequest Clone() {
      return new UIYaasRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Org.Roylance.Yaas.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "user_device" field.</summary>
    public const int UserDeviceFieldNumber = 4;
    private global::Org.Roylance.Yaas.UserDevice userDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.UserDevice UserDevice {
      get { return userDevice_; }
      set {
        userDevice_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private global::Org.Roylance.Yaas.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 7;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "change_password" field.</summary>
    public const int ChangePasswordFieldNumber = 8;
    private global::Org.Roylance.Yaas.UIChangePassword changePassword_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.UIChangePassword ChangePassword {
      get { return changePassword_; }
      set {
        changePassword_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYaasRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYaasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(UserDevice, other.UserDevice)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      if (!object.Equals(ChangePassword, other.ChangePassword)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (userDevice_ != null) hash ^= UserDevice.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (changePassword_ != null) hash ^= ChangePassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      if (userDevice_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserDevice);
      }
      if (image_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Image);
      }
      if (Offset != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Offset);
      }
      if (Limit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Limit);
      }
      if (changePassword_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ChangePassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (userDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDevice);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (changePassword_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangePassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYaasRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Org.Roylance.Yaas.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.userDevice_ != null) {
        if (userDevice_ == null) {
          userDevice_ = new global::Org.Roylance.Yaas.UserDevice();
        }
        UserDevice.MergeFrom(other.UserDevice);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Org.Roylance.Yaas.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.changePassword_ != null) {
        if (changePassword_ == null) {
          changePassword_ = new global::Org.Roylance.Yaas.UIChangePassword();
        }
        ChangePassword.MergeFrom(other.ChangePassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Org.Roylance.Yaas.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 34: {
            if (userDevice_ == null) {
              userDevice_ = new global::Org.Roylance.Yaas.UserDevice();
            }
            input.ReadMessage(userDevice_);
            break;
          }
          case 42: {
            if (image_ == null) {
              image_ = new global::Org.Roylance.Yaas.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 48: {
            Offset = input.ReadInt32();
            break;
          }
          case 56: {
            Limit = input.ReadInt32();
            break;
          }
          case 66: {
            if (changePassword_ == null) {
              changePassword_ = new global::Org.Roylance.Yaas.UIChangePassword();
            }
            input.ReadMessage(changePassword_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIYaasResponse : pb::IMessage<UIYaasResponse> {
    private static readonly pb::MessageParser<UIYaasResponse> _parser = new pb::MessageParser<UIYaasResponse>(() => new UIYaasResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYaasResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasResponse(UIYaasResponse other) : this() {
      authenticated_ = other.authenticated_;
      errorMessage_ = other.errorMessage_;
      successful_ = other.successful_;
      content_ = other.content_;
      isAdmin_ = other.isAdmin_;
      User = other.user_ != null ? other.User.Clone() : null;
      Users = other.users_ != null ? other.Users.Clone() : null;
      userDevices_ = other.userDevices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaasResponse Clone() {
      return new UIYaasResponse(this);
    }

    /// <summary>Field number for the "authenticated" field.</summary>
    public const int AuthenticatedFieldNumber = 1;
    private bool authenticated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authenticated {
      get { return authenticated_; }
      set {
        authenticated_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 3;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_admin" field.</summary>
    public const int IsAdminFieldNumber = 5;
    private bool isAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 6;
    private global::Org.Roylance.Yaas.UIAuthentication user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.UIAuthentication User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 7;
    private global::Org.Roylance.Yaas.UIAuthentications users_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaas.UIAuthentications Users {
      get { return users_; }
      set {
        users_ = value;
      }
    }

    /// <summary>Field number for the "user_devices" field.</summary>
    public const int UserDevicesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaas.UserDevice> _repeated_userDevices_codec
        = pb::FieldCodec.ForMessage(66, global::Org.Roylance.Yaas.UserDevice.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaas.UserDevice> userDevices_ = new pbc::RepeatedField<global::Org.Roylance.Yaas.UserDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaas.UserDevice> UserDevices {
      get { return userDevices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYaasResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYaasResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authenticated != other.Authenticated) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (Successful != other.Successful) return false;
      if (Content != other.Content) return false;
      if (IsAdmin != other.IsAdmin) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Users, other.Users)) return false;
      if(!userDevices_.Equals(other.userDevices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Authenticated != false) hash ^= Authenticated.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (Successful != false) hash ^= Successful.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (users_ != null) hash ^= Users.GetHashCode();
      hash ^= userDevices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Authenticated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Authenticated);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (Successful != false) {
        output.WriteRawTag(24);
        output.WriteBool(Successful);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAdmin);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (users_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Users);
      }
      userDevices_.WriteTo(output, _repeated_userDevices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Authenticated != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (Successful != false) {
        size += 1 + 1;
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (users_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Users);
      }
      size += userDevices_.CalculateSize(_repeated_userDevices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYaasResponse other) {
      if (other == null) {
        return;
      }
      if (other.Authenticated != false) {
        Authenticated = other.Authenticated;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Org.Roylance.Yaas.UIAuthentication();
        }
        User.MergeFrom(other.User);
      }
      if (other.users_ != null) {
        if (users_ == null) {
          users_ = new global::Org.Roylance.Yaas.UIAuthentications();
        }
        Users.MergeFrom(other.Users);
      }
      userDevices_.Add(other.userDevices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Authenticated = input.ReadBool();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 24: {
            Successful = input.ReadBool();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 40: {
            IsAdmin = input.ReadBool();
            break;
          }
          case 50: {
            if (user_ == null) {
              user_ = new global::Org.Roylance.Yaas.UIAuthentication();
            }
            input.ReadMessage(user_);
            break;
          }
          case 58: {
            if (users_ == null) {
              users_ = new global::Org.Roylance.Yaas.UIAuthentications();
            }
            input.ReadMessage(users_);
            break;
          }
          case 66: {
            userDevices_.AddEntriesFrom(input, _repeated_userDevices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIAuthentications : pb::IMessage<UIAuthentications> {
    private static readonly pb::MessageParser<UIAuthentications> _parser = new pb::MessageParser<UIAuthentications>(() => new UIAuthentications());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIAuthentications> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaas.YaasModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentications() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentications(UIAuthentications other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIAuthentications Clone() {
      return new UIAuthentications(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaas.UIAuthentication> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaas.UIAuthentication.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaas.UIAuthentication> users_ = new pbc::RepeatedField<global::Org.Roylance.Yaas.UIAuthentication>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaas.UIAuthentication> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIAuthentications);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIAuthentications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIAuthentications other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
