/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaas_controller.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "org.roylance.yaas"

public struct Org_Roylance_Yaas_RequestAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  private class _StorageClass {
    var _request: Org_Roylance_Yaas_UIYaasRequest? = nil
    var _response: Org_Roylance_Yaas_UIYaasResponse? = nil

    init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var request: Org_Roylance_Yaas_UIYaasRequest {
    get {return _storage._request ?? Org_Roylance_Yaas_UIYaasRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  public var response: Org_Roylance_Yaas_UIYaasResponse {
    get {return _storage._response ?? Org_Roylance_Yaas_UIYaasResponse()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_RequestAction) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_AdminController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminController"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "change_password_for_user"),
    2: .standard(proto: "get_all_users"),
    3: .standard(proto: "is_user_admin"),
    4: .standard(proto: "set_user_as_admin"),
    5: .standard(proto: "remove_user_as_admin"),
    6: .standard(proto: "delete_user"),
  ]

  private class _StorageClass {
    var _changePasswordForUser: Org_Roylance_Yaas_RequestAction? = nil
    var _getAllUsers: Org_Roylance_Yaas_RequestAction? = nil
    var _isUserAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _setUserAsAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _removeUserAsAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _deleteUser: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    init(copying source: _StorageClass) {
      _changePasswordForUser = source._changePasswordForUser
      _getAllUsers = source._getAllUsers
      _isUserAdmin = source._isUserAdmin
      _setUserAsAdmin = source._setUserAsAdmin
      _removeUserAsAdmin = source._removeUserAsAdmin
      _deleteUser = source._deleteUser
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var changePasswordForUser: Org_Roylance_Yaas_RequestAction {
    get {return _storage._changePasswordForUser ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._changePasswordForUser = newValue}
  }
  public var hasChangePasswordForUser: Bool {
    return _storage._changePasswordForUser != nil
  }
  public mutating func clearChangePasswordForUser() {
    return _storage._changePasswordForUser = nil
  }

  public var getAllUsers: Org_Roylance_Yaas_RequestAction {
    get {return _storage._getAllUsers ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._getAllUsers = newValue}
  }
  public var hasGetAllUsers: Bool {
    return _storage._getAllUsers != nil
  }
  public mutating func clearGetAllUsers() {
    return _storage._getAllUsers = nil
  }

  public var isUserAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._isUserAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._isUserAdmin = newValue}
  }
  public var hasIsUserAdmin: Bool {
    return _storage._isUserAdmin != nil
  }
  public mutating func clearIsUserAdmin() {
    return _storage._isUserAdmin = nil
  }

  public var setUserAsAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._setUserAsAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._setUserAsAdmin = newValue}
  }
  public var hasSetUserAsAdmin: Bool {
    return _storage._setUserAsAdmin != nil
  }
  public mutating func clearSetUserAsAdmin() {
    return _storage._setUserAsAdmin = nil
  }

  public var removeUserAsAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._removeUserAsAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._removeUserAsAdmin = newValue}
  }
  public var hasRemoveUserAsAdmin: Bool {
    return _storage._removeUserAsAdmin != nil
  }
  public mutating func clearRemoveUserAsAdmin() {
    return _storage._removeUserAsAdmin = nil
  }

  public var deleteUser: Org_Roylance_Yaas_RequestAction {
    get {return _storage._deleteUser ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._deleteUser = newValue}
  }
  public var hasDeleteUser: Bool {
    return _storage._deleteUser != nil
  }
  public mutating func clearDeleteUser() {
    return _storage._deleteUser = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._changePasswordForUser)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._getAllUsers)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._isUserAdmin)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._setUserAsAdmin)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._removeUserAsAdmin)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._deleteUser)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._changePasswordForUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._getAllUsers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._isUserAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._setUserAsAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._removeUserAsAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._deleteUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_AdminController) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._changePasswordForUser != other_storage._changePasswordForUser {return false}
        if _storage._getAllUsers != other_storage._getAllUsers {return false}
        if _storage._isUserAdmin != other_storage._isUserAdmin {return false}
        if _storage._setUserAsAdmin != other_storage._setUserAsAdmin {return false}
        if _storage._removeUserAsAdmin != other_storage._removeUserAsAdmin {return false}
        if _storage._deleteUser != other_storage._deleteUser {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_AuthenticationController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthenticationController"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exists"),
    2: .same(proto: "login"),
    3: .same(proto: "authenticate"),
    4: .same(proto: "register"),
    5: .standard(proto: "change_password"),
    6: .same(proto: "save"),
  ]

  private class _StorageClass {
    var _exists: Org_Roylance_Yaas_RequestAction? = nil
    var _login: Org_Roylance_Yaas_RequestAction? = nil
    var _authenticate: Org_Roylance_Yaas_RequestAction? = nil
    var _register: Org_Roylance_Yaas_RequestAction? = nil
    var _changePassword: Org_Roylance_Yaas_RequestAction? = nil
    var _save: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    init(copying source: _StorageClass) {
      _exists = source._exists
      _login = source._login
      _authenticate = source._authenticate
      _register = source._register
      _changePassword = source._changePassword
      _save = source._save
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var exists: Org_Roylance_Yaas_RequestAction {
    get {return _storage._exists ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._exists = newValue}
  }
  public var hasExists: Bool {
    return _storage._exists != nil
  }
  public mutating func clearExists() {
    return _storage._exists = nil
  }

  public var login: Org_Roylance_Yaas_RequestAction {
    get {return _storage._login ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._login = newValue}
  }
  public var hasLogin: Bool {
    return _storage._login != nil
  }
  public mutating func clearLogin() {
    return _storage._login = nil
  }

  public var authenticate: Org_Roylance_Yaas_RequestAction {
    get {return _storage._authenticate ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._authenticate = newValue}
  }
  public var hasAuthenticate: Bool {
    return _storage._authenticate != nil
  }
  public mutating func clearAuthenticate() {
    return _storage._authenticate = nil
  }

  public var register: Org_Roylance_Yaas_RequestAction {
    get {return _storage._register ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._register = newValue}
  }
  public var hasRegister: Bool {
    return _storage._register != nil
  }
  public mutating func clearRegister() {
    return _storage._register = nil
  }

  public var changePassword: Org_Roylance_Yaas_RequestAction {
    get {return _storage._changePassword ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._changePassword = newValue}
  }
  public var hasChangePassword: Bool {
    return _storage._changePassword != nil
  }
  public mutating func clearChangePassword() {
    return _storage._changePassword = nil
  }

  public var save: Org_Roylance_Yaas_RequestAction {
    get {return _storage._save ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._save = newValue}
  }
  public var hasSave: Bool {
    return _storage._save != nil
  }
  public mutating func clearSave() {
    return _storage._save = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._exists)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._login)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._authenticate)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._changePassword)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._save)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._exists {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._login {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._authenticate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._changePassword {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._save {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_AuthenticationController) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._exists != other_storage._exists {return false}
        if _storage._login != other_storage._login {return false}
        if _storage._authenticate != other_storage._authenticate {return false}
        if _storage._register != other_storage._register {return false}
        if _storage._changePassword != other_storage._changePassword {return false}
        if _storage._save != other_storage._save {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UserDeviceController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserDeviceController"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "save"),
    2: .same(proto: "all"),
  ]

  private class _StorageClass {
    var _save: Org_Roylance_Yaas_RequestAction? = nil
    var _all: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    init(copying source: _StorageClass) {
      _save = source._save
      _all = source._all
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var save: Org_Roylance_Yaas_RequestAction {
    get {return _storage._save ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._save = newValue}
  }
  public var hasSave: Bool {
    return _storage._save != nil
  }
  public mutating func clearSave() {
    return _storage._save = nil
  }

  public var all: Org_Roylance_Yaas_RequestAction {
    get {return _storage._all ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._all = newValue}
  }
  public var hasAll: Bool {
    return _storage._all != nil
  }
  public mutating func clearAll() {
    return _storage._all = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._save)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._all)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._save {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._all {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UserDeviceController) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._save != other_storage._save {return false}
        if _storage._all != other_storage._all {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
