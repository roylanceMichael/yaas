/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaas_controller.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Org_Roylance_Yaas_RequestAction: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaas_RequestAction"}
  public var protoMessageName: String {return "RequestAction"}
  public var protoPackageName: String {return "org.roylance.yaas"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .same(proto: "response", swift: "response"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaas_RequestAction
    var _request: Org_Roylance_Yaas_UIYaasRequest? = nil
    var _response: Org_Roylance_Yaas_UIYaasResponse? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_UIYaasRequest.self, value: &_request)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_UIYaasResponse.self, value: &_response)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _response != other._response {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._response = _response
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var request: Org_Roylance_Yaas_UIYaasRequest {
    get {return _storage._request ?? Org_Roylance_Yaas_UIYaasRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  public var response: Org_Roylance_Yaas_UIYaasResponse {
    get {return _storage._response ?? Org_Roylance_Yaas_UIYaasResponse()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaas_RequestAction) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaas_AdminController: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaas_AdminController"}
  public var protoMessageName: String {return "AdminController"}
  public var protoPackageName: String {return "org.roylance.yaas"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "change_password_for_user", json: "changePasswordForUser", swift: "changePasswordForUser"),
    2: .unique(proto: "get_all_users", json: "getAllUsers", swift: "getAllUsers"),
    3: .unique(proto: "is_user_admin", json: "isUserAdmin", swift: "isUserAdmin"),
    4: .unique(proto: "set_user_as_admin", json: "setUserAsAdmin", swift: "setUserAsAdmin"),
    5: .unique(proto: "remove_user_as_admin", json: "removeUserAsAdmin", swift: "removeUserAsAdmin"),
    6: .unique(proto: "delete_user", json: "deleteUser", swift: "deleteUser"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaas_AdminController
    var _changePasswordForUser: Org_Roylance_Yaas_RequestAction? = nil
    var _getAllUsers: Org_Roylance_Yaas_RequestAction? = nil
    var _isUserAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _setUserAsAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _removeUserAsAdmin: Org_Roylance_Yaas_RequestAction? = nil
    var _deleteUser: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_changePasswordForUser)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_getAllUsers)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_isUserAdmin)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_setUserAsAdmin)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_removeUserAsAdmin)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_deleteUser)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _changePasswordForUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _getAllUsers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _isUserAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _setUserAsAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _removeUserAsAdmin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _deleteUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _changePasswordForUser != other._changePasswordForUser {return false}
      if _getAllUsers != other._getAllUsers {return false}
      if _isUserAdmin != other._isUserAdmin {return false}
      if _setUserAsAdmin != other._setUserAsAdmin {return false}
      if _removeUserAsAdmin != other._removeUserAsAdmin {return false}
      if _deleteUser != other._deleteUser {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._changePasswordForUser = _changePasswordForUser
      clone._getAllUsers = _getAllUsers
      clone._isUserAdmin = _isUserAdmin
      clone._setUserAsAdmin = _setUserAsAdmin
      clone._removeUserAsAdmin = _removeUserAsAdmin
      clone._deleteUser = _deleteUser
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var changePasswordForUser: Org_Roylance_Yaas_RequestAction {
    get {return _storage._changePasswordForUser ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._changePasswordForUser = newValue}
  }
  public var hasChangePasswordForUser: Bool {
    return _storage._changePasswordForUser != nil
  }
  public mutating func clearChangePasswordForUser() {
    return _storage._changePasswordForUser = nil
  }

  public var getAllUsers: Org_Roylance_Yaas_RequestAction {
    get {return _storage._getAllUsers ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._getAllUsers = newValue}
  }
  public var hasGetAllUsers: Bool {
    return _storage._getAllUsers != nil
  }
  public mutating func clearGetAllUsers() {
    return _storage._getAllUsers = nil
  }

  public var isUserAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._isUserAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._isUserAdmin = newValue}
  }
  public var hasIsUserAdmin: Bool {
    return _storage._isUserAdmin != nil
  }
  public mutating func clearIsUserAdmin() {
    return _storage._isUserAdmin = nil
  }

  public var setUserAsAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._setUserAsAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._setUserAsAdmin = newValue}
  }
  public var hasSetUserAsAdmin: Bool {
    return _storage._setUserAsAdmin != nil
  }
  public mutating func clearSetUserAsAdmin() {
    return _storage._setUserAsAdmin = nil
  }

  public var removeUserAsAdmin: Org_Roylance_Yaas_RequestAction {
    get {return _storage._removeUserAsAdmin ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._removeUserAsAdmin = newValue}
  }
  public var hasRemoveUserAsAdmin: Bool {
    return _storage._removeUserAsAdmin != nil
  }
  public mutating func clearRemoveUserAsAdmin() {
    return _storage._removeUserAsAdmin = nil
  }

  public var deleteUser: Org_Roylance_Yaas_RequestAction {
    get {return _storage._deleteUser ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._deleteUser = newValue}
  }
  public var hasDeleteUser: Bool {
    return _storage._deleteUser != nil
  }
  public mutating func clearDeleteUser() {
    return _storage._deleteUser = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaas_AdminController) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaas_AuthenticationController: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaas_AuthenticationController"}
  public var protoMessageName: String {return "AuthenticationController"}
  public var protoPackageName: String {return "org.roylance.yaas"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "exists", swift: "exists"),
    2: .same(proto: "login", swift: "login"),
    3: .same(proto: "authenticate", swift: "authenticate"),
    4: .same(proto: "register", swift: "register"),
    5: .unique(proto: "change_password", json: "changePassword", swift: "changePassword"),
    6: .same(proto: "save", swift: "save"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaas_AuthenticationController
    var _exists: Org_Roylance_Yaas_RequestAction? = nil
    var _login: Org_Roylance_Yaas_RequestAction? = nil
    var _authenticate: Org_Roylance_Yaas_RequestAction? = nil
    var _register: Org_Roylance_Yaas_RequestAction? = nil
    var _changePassword: Org_Roylance_Yaas_RequestAction? = nil
    var _save: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_exists)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_login)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_authenticate)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_register)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_changePassword)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_save)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _exists {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _login {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _authenticate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _changePassword {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _save {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _exists != other._exists {return false}
      if _login != other._login {return false}
      if _authenticate != other._authenticate {return false}
      if _register != other._register {return false}
      if _changePassword != other._changePassword {return false}
      if _save != other._save {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._exists = _exists
      clone._login = _login
      clone._authenticate = _authenticate
      clone._register = _register
      clone._changePassword = _changePassword
      clone._save = _save
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var exists: Org_Roylance_Yaas_RequestAction {
    get {return _storage._exists ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._exists = newValue}
  }
  public var hasExists: Bool {
    return _storage._exists != nil
  }
  public mutating func clearExists() {
    return _storage._exists = nil
  }

  public var login: Org_Roylance_Yaas_RequestAction {
    get {return _storage._login ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._login = newValue}
  }
  public var hasLogin: Bool {
    return _storage._login != nil
  }
  public mutating func clearLogin() {
    return _storage._login = nil
  }

  public var authenticate: Org_Roylance_Yaas_RequestAction {
    get {return _storage._authenticate ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._authenticate = newValue}
  }
  public var hasAuthenticate: Bool {
    return _storage._authenticate != nil
  }
  public mutating func clearAuthenticate() {
    return _storage._authenticate = nil
  }

  public var register: Org_Roylance_Yaas_RequestAction {
    get {return _storage._register ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._register = newValue}
  }
  public var hasRegister: Bool {
    return _storage._register != nil
  }
  public mutating func clearRegister() {
    return _storage._register = nil
  }

  public var changePassword: Org_Roylance_Yaas_RequestAction {
    get {return _storage._changePassword ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._changePassword = newValue}
  }
  public var hasChangePassword: Bool {
    return _storage._changePassword != nil
  }
  public mutating func clearChangePassword() {
    return _storage._changePassword = nil
  }

  public var save: Org_Roylance_Yaas_RequestAction {
    get {return _storage._save ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._save = newValue}
  }
  public var hasSave: Bool {
    return _storage._save != nil
  }
  public mutating func clearSave() {
    return _storage._save = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaas_AuthenticationController) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaas_UserDeviceController: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaas_UserDeviceController"}
  public var protoMessageName: String {return "UserDeviceController"}
  public var protoPackageName: String {return "org.roylance.yaas"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "save", swift: "save"),
    2: .same(proto: "all", swift: "all"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaas_UserDeviceController
    var _save: Org_Roylance_Yaas_RequestAction? = nil
    var _all: Org_Roylance_Yaas_RequestAction? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_save)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaas_RequestAction.self, value: &_all)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _save {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _all {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _save != other._save {return false}
      if _all != other._all {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._save = _save
      clone._all = _all
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var save: Org_Roylance_Yaas_RequestAction {
    get {return _storage._save ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._save = newValue}
  }
  public var hasSave: Bool {
    return _storage._save != nil
  }
  public mutating func clearSave() {
    return _storage._save = nil
  }

  public var all: Org_Roylance_Yaas_RequestAction {
    get {return _storage._all ?? Org_Roylance_Yaas_RequestAction()}
    set {_uniqueStorage()._all = newValue}
  }
  public var hasAll: Bool {
    return _storage._all != nil
  }
  public mutating func clearAll() {
    return _storage._all = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaas_UserDeviceController) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
