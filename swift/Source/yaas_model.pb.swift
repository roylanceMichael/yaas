/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaas_model.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "org.roylance.yaas"

public enum Org_Roylance_Yaas_UserDeviceType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case android // = 0
  case ios // = 1
  case javascript // = 2
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANDROID"),
    1: .same(proto: "IOS"),
    2: .same(proto: "JAVASCRIPT"),
  ]

  public init() {
    self = .android
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .android
    case 1: self = .ios
    case 2: self = .javascript
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .android: return 0
    case .ios: return 1
    case .javascript: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yaas_UserRole: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case normal // = 0
  case admin // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "ADMIN"),
  ]

  public init() {
    self = .normal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .admin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .normal: return 0
    case .admin: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Org_Roylance_Yaas_UserDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "user_device_type"),
    3: .standard(proto: "user_device_token"),
    4: .standard(proto: "last_updated"),
    5: .same(proto: "user"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _userDeviceType: Org_Roylance_Yaas_UserDeviceType = Org_Roylance_Yaas_UserDeviceType.android
    var _userDeviceToken: String = ""
    var _lastUpdated: Int64 = 0
    var _user: Org_Roylance_Yaas_User? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _userDeviceType = source._userDeviceType
      _userDeviceToken = source._userDeviceToken
      _lastUpdated = source._lastUpdated
      _user = source._user
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var userDeviceType: Org_Roylance_Yaas_UserDeviceType {
    get {return _storage._userDeviceType}
    set {_uniqueStorage()._userDeviceType = newValue}
  }

  public var userDeviceToken: String {
    get {return _storage._userDeviceToken}
    set {_uniqueStorage()._userDeviceToken = newValue}
  }

  public var lastUpdated: Int64 {
    get {return _storage._lastUpdated}
    set {_uniqueStorage()._lastUpdated = newValue}
  }

  public var user: Org_Roylance_Yaas_User {
    get {return _storage._user ?? Org_Roylance_Yaas_User()}
    set {_uniqueStorage()._user = newValue}
  }
  public var hasUser: Bool {
    return _storage._user != nil
  }
  public mutating func clearUser() {
    return _storage._user = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._userDeviceType)
        case 3: try decoder.decodeSingularStringField(value: &_storage._userDeviceToken)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._lastUpdated)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._userDeviceType != Org_Roylance_Yaas_UserDeviceType.android {
        try visitor.visitSingularEnumField(value: _storage._userDeviceType, fieldNumber: 2)
      }
      if !_storage._userDeviceToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userDeviceToken, fieldNumber: 3)
      }
      if _storage._lastUpdated != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdated, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UserDevice) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._userDeviceType != other_storage._userDeviceType {return false}
        if _storage._userDeviceToken != other_storage._userDeviceToken {return false}
        if _storage._lastUpdated != other_storage._lastUpdated {return false}
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "actual_image"),
  ]

  public var id: String = ""

  public var name: String = ""

  public var actualImage: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &name)
      case 3: try decoder.decodeSingularStringField(value: &actualImage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 2)
    }
    if !actualImage.isEmpty {
      try visitor.visitSingularStringField(value: actualImage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_Image) -> Bool {
    if id != other.id {return false}
    if name != other.name {return false}
    if actualImage != other.actualImage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "user_name"),
    3: .same(proto: "password"),
    4: .same(proto: "display"),
    5: .standard(proto: "first_name"),
    6: .standard(proto: "last_name"),
    7: .same(proto: "image"),
    8: .same(proto: "roles"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _userName: String = ""
    var _password: String = ""
    var _display: String = ""
    var _firstName: String = ""
    var _lastName: String = ""
    var _image: Org_Roylance_Yaas_Image? = nil
    var _roles: [Org_Roylance_Yaas_UserRole] = []

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _userName = source._userName
      _password = source._password
      _display = source._display
      _firstName = source._firstName
      _lastName = source._lastName
      _image = source._image
      _roles = source._roles
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  public var display: String {
    get {return _storage._display}
    set {_uniqueStorage()._display = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var image: Org_Roylance_Yaas_Image {
    get {return _storage._image ?? Org_Roylance_Yaas_Image()}
    set {_uniqueStorage()._image = newValue}
  }
  public var hasImage: Bool {
    return _storage._image != nil
  }
  public mutating func clearImage() {
    return _storage._image = nil
  }

  public var roles: [Org_Roylance_Yaas_UserRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._password)
        case 4: try decoder.decodeSingularStringField(value: &_storage._display)
        case 5: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 8: try decoder.decodeRepeatedEnumField(value: &_storage._roles)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 2)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 3)
      }
      if !_storage._display.isEmpty {
        try visitor.visitSingularStringField(value: _storage._display, fieldNumber: 4)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 5)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 6)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._roles, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_User) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._userName != other_storage._userName {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._display != other_storage._display {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._roles != other_storage._roles {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "user_id"),
    3: .same(proto: "issued"),
    4: .same(proto: "expiration"),
  ]

  public var id: String = ""

  public var userId: String = ""

  public var issued: Int64 = 0

  public var expiration: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &userId)
      case 3: try decoder.decodeSingularInt64Field(value: &issued)
      case 4: try decoder.decodeSingularInt64Field(value: &expiration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !userId.isEmpty {
      try visitor.visitSingularStringField(value: userId, fieldNumber: 2)
    }
    if issued != 0 {
      try visitor.visitSingularInt64Field(value: issued, fieldNumber: 3)
    }
    if expiration != 0 {
      try visitor.visitSingularInt64Field(value: expiration, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_Token) -> Bool {
    if id != other.id {return false}
    if userId != other.userId {return false}
    if issued != other.issued {return false}
    if expiration != other.expiration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UIAuthentication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIAuthentication"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authenticated"),
    2: .same(proto: "token"),
    3: .standard(proto: "user_name"),
    4: .same(proto: "display"),
    5: .standard(proto: "is_admin"),
  ]

  public var authenticated: Bool = false

  public var token: String = ""

  public var userName: String = ""

  public var display: String = ""

  public var isAdmin: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &authenticated)
      case 2: try decoder.decodeSingularStringField(value: &token)
      case 3: try decoder.decodeSingularStringField(value: &userName)
      case 4: try decoder.decodeSingularStringField(value: &display)
      case 5: try decoder.decodeSingularBoolField(value: &isAdmin)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if authenticated != false {
      try visitor.visitSingularBoolField(value: authenticated, fieldNumber: 1)
    }
    if !token.isEmpty {
      try visitor.visitSingularStringField(value: token, fieldNumber: 2)
    }
    if !userName.isEmpty {
      try visitor.visitSingularStringField(value: userName, fieldNumber: 3)
    }
    if !display.isEmpty {
      try visitor.visitSingularStringField(value: display, fieldNumber: 4)
    }
    if isAdmin != false {
      try visitor.visitSingularBoolField(value: isAdmin, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UIAuthentication) -> Bool {
    if authenticated != other.authenticated {return false}
    if token != other.token {return false}
    if userName != other.userName {return false}
    if display != other.display {return false}
    if isAdmin != other.isAdmin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UIChangePassword: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIChangePassword"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .standard(proto: "old_password"),
    3: .standard(proto: "new_password"),
  ]

  public var userName: String = ""

  public var oldPassword: String = ""

  public var newPassword: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &userName)
      case 2: try decoder.decodeSingularStringField(value: &oldPassword)
      case 3: try decoder.decodeSingularStringField(value: &newPassword)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !userName.isEmpty {
      try visitor.visitSingularStringField(value: userName, fieldNumber: 1)
    }
    if !oldPassword.isEmpty {
      try visitor.visitSingularStringField(value: oldPassword, fieldNumber: 2)
    }
    if !newPassword.isEmpty {
      try visitor.visitSingularStringField(value: newPassword, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UIChangePassword) -> Bool {
    if userName != other.userName {return false}
    if oldPassword != other.oldPassword {return false}
    if newPassword != other.newPassword {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UIYaasRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIYaasRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "content"),
    3: .same(proto: "user"),
    4: .standard(proto: "user_device"),
    5: .same(proto: "image"),
    6: .same(proto: "offset"),
    7: .same(proto: "limit"),
    8: .standard(proto: "change_password"),
  ]

  private class _StorageClass {
    var _token: String = ""
    var _content: String = ""
    var _user: Org_Roylance_Yaas_User? = nil
    var _userDevice: Org_Roylance_Yaas_UserDevice? = nil
    var _image: Org_Roylance_Yaas_Image? = nil
    var _offset: Int32 = 0
    var _limit: Int32 = 0
    var _changePassword: Org_Roylance_Yaas_UIChangePassword? = nil

    init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _content = source._content
      _user = source._user
      _userDevice = source._userDevice
      _image = source._image
      _offset = source._offset
      _limit = source._limit
      _changePassword = source._changePassword
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var user: Org_Roylance_Yaas_User {
    get {return _storage._user ?? Org_Roylance_Yaas_User()}
    set {_uniqueStorage()._user = newValue}
  }
  public var hasUser: Bool {
    return _storage._user != nil
  }
  public mutating func clearUser() {
    return _storage._user = nil
  }

  public var userDevice: Org_Roylance_Yaas_UserDevice {
    get {return _storage._userDevice ?? Org_Roylance_Yaas_UserDevice()}
    set {_uniqueStorage()._userDevice = newValue}
  }
  public var hasUserDevice: Bool {
    return _storage._userDevice != nil
  }
  public mutating func clearUserDevice() {
    return _storage._userDevice = nil
  }

  public var image: Org_Roylance_Yaas_Image {
    get {return _storage._image ?? Org_Roylance_Yaas_Image()}
    set {_uniqueStorage()._image = newValue}
  }
  public var hasImage: Bool {
    return _storage._image != nil
  }
  public mutating func clearImage() {
    return _storage._image = nil
  }

  public var offset: Int32 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var limit: Int32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var changePassword: Org_Roylance_Yaas_UIChangePassword {
    get {return _storage._changePassword ?? Org_Roylance_Yaas_UIChangePassword()}
    set {_uniqueStorage()._changePassword = newValue}
  }
  public var hasChangePassword: Bool {
    return _storage._changePassword != nil
  }
  public mutating func clearChangePassword() {
    return _storage._changePassword = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
        case 2: try decoder.decodeSingularStringField(value: &_storage._content)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._userDevice)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._offset)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._limit)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._changePassword)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 1)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 2)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._userDevice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offset, fieldNumber: 6)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._limit, fieldNumber: 7)
      }
      if let v = _storage._changePassword {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UIYaasRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._token != other_storage._token {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._userDevice != other_storage._userDevice {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._offset != other_storage._offset {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._changePassword != other_storage._changePassword {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UIYaasResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIYaasResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authenticated"),
    2: .standard(proto: "error_message"),
    3: .same(proto: "successful"),
    4: .same(proto: "content"),
    5: .standard(proto: "is_admin"),
    6: .same(proto: "user"),
    7: .same(proto: "users"),
    8: .standard(proto: "user_devices"),
  ]

  private class _StorageClass {
    var _authenticated: Bool = false
    var _errorMessage: String = ""
    var _successful: Bool = false
    var _content: String = ""
    var _isAdmin: Bool = false
    var _user: Org_Roylance_Yaas_UIAuthentication? = nil
    var _users: Org_Roylance_Yaas_UIAuthentications? = nil
    var _userDevices: [Org_Roylance_Yaas_UserDevice] = []

    init() {}

    init(copying source: _StorageClass) {
      _authenticated = source._authenticated
      _errorMessage = source._errorMessage
      _successful = source._successful
      _content = source._content
      _isAdmin = source._isAdmin
      _user = source._user
      _users = source._users
      _userDevices = source._userDevices
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var authenticated: Bool {
    get {return _storage._authenticated}
    set {_uniqueStorage()._authenticated = newValue}
  }

  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  public var successful: Bool {
    get {return _storage._successful}
    set {_uniqueStorage()._successful = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var isAdmin: Bool {
    get {return _storage._isAdmin}
    set {_uniqueStorage()._isAdmin = newValue}
  }

  public var user: Org_Roylance_Yaas_UIAuthentication {
    get {return _storage._user ?? Org_Roylance_Yaas_UIAuthentication()}
    set {_uniqueStorage()._user = newValue}
  }
  public var hasUser: Bool {
    return _storage._user != nil
  }
  public mutating func clearUser() {
    return _storage._user = nil
  }

  public var users: Org_Roylance_Yaas_UIAuthentications {
    get {return _storage._users ?? Org_Roylance_Yaas_UIAuthentications()}
    set {_uniqueStorage()._users = newValue}
  }
  public var hasUsers: Bool {
    return _storage._users != nil
  }
  public mutating func clearUsers() {
    return _storage._users = nil
  }

  public var userDevices: [Org_Roylance_Yaas_UserDevice] {
    get {return _storage._userDevices}
    set {_uniqueStorage()._userDevices = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._authenticated)
        case 2: try decoder.decodeSingularStringField(value: &_storage._errorMessage)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._successful)
        case 4: try decoder.decodeSingularStringField(value: &_storage._content)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isAdmin)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._users)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._userDevices)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._authenticated != false {
        try visitor.visitSingularBoolField(value: _storage._authenticated, fieldNumber: 1)
      }
      if !_storage._errorMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorMessage, fieldNumber: 2)
      }
      if _storage._successful != false {
        try visitor.visitSingularBoolField(value: _storage._successful, fieldNumber: 3)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 4)
      }
      if _storage._isAdmin != false {
        try visitor.visitSingularBoolField(value: _storage._isAdmin, fieldNumber: 5)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._users {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._userDevices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._userDevices, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UIYaasResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._authenticated != other_storage._authenticated {return false}
        if _storage._errorMessage != other_storage._errorMessage {return false}
        if _storage._successful != other_storage._successful {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._isAdmin != other_storage._isAdmin {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._users != other_storage._users {return false}
        if _storage._userDevices != other_storage._userDevices {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaas_UIAuthentications: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIAuthentications"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
  ]

  public var users: [Org_Roylance_Yaas_UIAuthentication] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &users)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !users.isEmpty {
      try visitor.visitRepeatedMessageField(value: users, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaas_UIAuthentications) -> Bool {
    if users != other.users {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
