// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file YaasModels.proto

import Foundation
import ProtocolBuffers


public struct Org { public struct Roylance { public struct Yaas { public struct Models { }}}}

public func == (lhs: Org.Roylance.Yaas.Models.UserDevice, rhs: Org.Roylance.Yaas.Models.UserDevice) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUserDeviceType == rhs.hasUserDeviceType) && (!lhs.hasUserDeviceType || lhs.userDeviceType == rhs.userDeviceType)
  fieldCheck = fieldCheck && (lhs.hasUserDeviceToken == rhs.hasUserDeviceToken) && (!lhs.hasUserDeviceToken || lhs.userDeviceToken == rhs.userDeviceToken)
  fieldCheck = fieldCheck && (lhs.hasLastUpdated == rhs.hasLastUpdated) && (!lhs.hasLastUpdated || lhs.lastUpdated == rhs.lastUpdated)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Image, rhs: Org.Roylance.Yaas.Models.Image) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasActualImage == rhs.hasActualImage) && (!lhs.hasActualImage || lhs.actualImage == rhs.actualImage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.User, rhs: Org.Roylance.Yaas.Models.User) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUserName == rhs.hasUserName) && (!lhs.hasUserName || lhs.userName == rhs.userName)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasDisplay == rhs.hasDisplay) && (!lhs.hasDisplay || lhs.display == rhs.display)
  fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
  fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
  fieldCheck = fieldCheck && (lhs.hasImage == rhs.hasImage) && (!lhs.hasImage || lhs.image == rhs.image)
  fieldCheck = fieldCheck && (lhs.roles == rhs.roles)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Token, rhs: Org.Roylance.Yaas.Models.Token) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasIssued == rhs.hasIssued) && (!lhs.hasIssued || lhs.issued == rhs.issued)
  fieldCheck = fieldCheck && (lhs.hasExpiration == rhs.hasExpiration) && (!lhs.hasExpiration || lhs.expiration == rhs.expiration)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Uiauthentication, rhs: Org.Roylance.Yaas.Models.Uiauthentication) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAuthenticated == rhs.hasAuthenticated) && (!lhs.hasAuthenticated || lhs.authenticated == rhs.authenticated)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasUserName == rhs.hasUserName) && (!lhs.hasUserName || lhs.userName == rhs.userName)
  fieldCheck = fieldCheck && (lhs.hasDisplay == rhs.hasDisplay) && (!lhs.hasDisplay || lhs.display == rhs.display)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.UichangePassword, rhs: Org.Roylance.Yaas.Models.UichangePassword) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserName == rhs.hasUserName) && (!lhs.hasUserName || lhs.userName == rhs.userName)
  fieldCheck = fieldCheck && (lhs.hasOldPassword == rhs.hasOldPassword) && (!lhs.hasOldPassword || lhs.oldPassword == rhs.oldPassword)
  fieldCheck = fieldCheck && (lhs.hasNewPassword == rhs.hasNewPassword) && (!lhs.hasNewPassword || lhs.newPassword == rhs.newPassword)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Uirequest, rhs: Org.Roylance.Yaas.Models.Uirequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Uiresponse, rhs: Org.Roylance.Yaas.Models.Uiresponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAuthenticated == rhs.hasAuthenticated) && (!lhs.hasAuthenticated || lhs.authenticated == rhs.authenticated)
  fieldCheck = fieldCheck && (lhs.hasErrorMessage == rhs.hasErrorMessage) && (!lhs.hasErrorMessage || lhs.errorMessage == rhs.errorMessage)
  fieldCheck = fieldCheck && (lhs.hasSuccessful == rhs.hasSuccessful) && (!lhs.hasSuccessful || lhs.successful == rhs.successful)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = fieldCheck && (lhs.hasUsers == rhs.hasUsers) && (!lhs.hasUsers || lhs.users == rhs.users)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Org.Roylance.Yaas.Models.Uiauthentications, rhs: Org.Roylance.Yaas.Models.Uiauthentications) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.users == rhs.users)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Org.Roylance.Yaas.Models {
  public struct YaasModelsRoot {
    public static var sharedInstance : YaasModelsRoot {
     struct Static {
         static let instance : YaasModelsRoot = YaasModelsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum UserDeviceType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Android = 0
    case Ios = 1
    case Javascript = 2

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Android: return ".Android"
            case .Ios: return ".Ios"
            case .Javascript: return ".Javascript"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum UserRole:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Normal = 0
    case Admin = 1

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Normal: return ".Normal"
            case .Admin: return ".Admin"
        }
    }
  }

  //Enum type declaration end 

  final public class UserDevice : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var userDeviceType:Org.Roylance.Yaas.Models.UserDeviceType = Org.Roylance.Yaas.Models.UserDeviceType.Android
    public private(set) var hasUserDeviceType:Bool = false
    public private(set) var userDeviceToken:String = ""

    public private(set) var hasUserDeviceToken:Bool = false
    public private(set) var lastUpdated:Int64 = Int64(0)

    public private(set) var hasLastUpdated:Bool = false
    public private(set) var user:Org.Roylance.Yaas.Models.User!
    public private(set) var hasUser:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasUserDeviceType {
        try output.writeEnum(2, value:userDeviceType.rawValue)
      }
      if hasUserDeviceToken {
        try output.writeString(3, value:userDeviceToken)
      }
      if hasLastUpdated {
        try output.writeInt64(4, value:lastUpdated)
      }
      if hasUser {
        try output.writeMessage(5, value:user)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if (hasUserDeviceType) {
        serialize_size += userDeviceType.rawValue.computeEnumSize(2)
      }
      if hasUserDeviceToken {
        serialize_size += userDeviceToken.computeStringSize(3)
      }
      if hasLastUpdated {
        serialize_size += lastUpdated.computeInt64Size(4)
      }
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(5) {
              serialize_size += varSizeuser
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.UserDevice> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.UserDevice>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.UserDevice? {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UserDevice {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.UserDevice.Builder {
      return Org.Roylance.Yaas.Models.UserDevice.classBuilder() as! Org.Roylance.Yaas.Models.UserDevice.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.UserDevice.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.UserDevice.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.UserDevice.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.UserDevice.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
      return try Org.Roylance.Yaas.Models.UserDevice.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.UserDevice) throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
      return try Org.Roylance.Yaas.Models.UserDevice.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasUserDeviceType) {
        output += "\(indent) userDeviceType: \(userDeviceType.description)\n"
      }
      if hasUserDeviceToken {
        output += "\(indent) userDeviceToken: \(userDeviceToken) \n"
      }
      if hasLastUpdated {
        output += "\(indent) lastUpdated: \(lastUpdated) \n"
      }
      if hasUser {
        output += "\(indent) user {\n"
        if let outDescUser = user {
          output += try outDescUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUserDeviceType {
               hashCode = (hashCode &* 31) &+ Int(userDeviceType.rawValue)
            }
            if hasUserDeviceToken {
               hashCode = (hashCode &* 31) &+ userDeviceToken.hashValue
            }
            if hasLastUpdated {
               hashCode = (hashCode &* 31) &+ lastUpdated.hashValue
            }
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.UserDevice"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.UserDevice"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.UserDevice.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.UserDevice = Org.Roylance.Yaas.Models.UserDevice()
      public func getMessage() -> Org.Roylance.Yaas.Models.UserDevice {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Org.Roylance.Yaas.Models.UserDevice.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
        public var hasUserDeviceType:Bool{
            get {
                return builderResult.hasUserDeviceType
            }
        }
        public var userDeviceType:Org.Roylance.Yaas.Models.UserDeviceType {
            get {
                return builderResult.userDeviceType
            }
            set (value) {
                builderResult.hasUserDeviceType = true
                builderResult.userDeviceType = value
            }
        }
        public func setUserDeviceType(value:Org.Roylance.Yaas.Models.UserDeviceType) -> Org.Roylance.Yaas.Models.UserDevice.Builder {
          self.userDeviceType = value
          return self
        }
        public func clearUserDeviceType() -> Org.Roylance.Yaas.Models.UserDevice.Builder {
           builderResult.hasUserDeviceType = false
           builderResult.userDeviceType = .Android
           return self
        }
      public var hasUserDeviceToken:Bool {
           get {
                return builderResult.hasUserDeviceToken
           }
      }
      public var userDeviceToken:String {
           get {
                return builderResult.userDeviceToken
           }
           set (value) {
               builderResult.hasUserDeviceToken = true
               builderResult.userDeviceToken = value
           }
      }
      public func setUserDeviceToken(value:String) -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        self.userDeviceToken = value
        return self
      }
      public func clearUserDeviceToken() -> Org.Roylance.Yaas.Models.UserDevice.Builder{
           builderResult.hasUserDeviceToken = false
           builderResult.userDeviceToken = ""
           return self
      }
      public var hasLastUpdated:Bool {
           get {
                return builderResult.hasLastUpdated
           }
      }
      public var lastUpdated:Int64 {
           get {
                return builderResult.lastUpdated
           }
           set (value) {
               builderResult.hasLastUpdated = true
               builderResult.lastUpdated = value
           }
      }
      public func setLastUpdated(value:Int64) -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        self.lastUpdated = value
        return self
      }
      public func clearLastUpdated() -> Org.Roylance.Yaas.Models.UserDevice.Builder{
           builderResult.hasLastUpdated = false
           builderResult.lastUpdated = Int64(0)
           return self
      }
      public var hasUser:Bool {
           get {
               return builderResult.hasUser
           }
      }
      public var user:Org.Roylance.Yaas.Models.User! {
           get {
               if userBuilder_ != nil {
                  builderResult.user = userBuilder_.getMessage()
               }
               return builderResult.user
           }
           set (value) {
               builderResult.hasUser = true
               builderResult.user = value
           }
      }
      private var userBuilder_:Org.Roylance.Yaas.Models.User.Builder! {
           didSet {
              builderResult.hasUser = true
           }
      }
      public func getUserBuilder() -> Org.Roylance.Yaas.Models.User.Builder {
        if userBuilder_ == nil {
           userBuilder_ = Org.Roylance.Yaas.Models.User.Builder()
           builderResult.user = userBuilder_.getMessage()
           if user != nil {
              try! userBuilder_.mergeFrom(user)
           }
        }
        return userBuilder_
      }
      public func setUser(value:Org.Roylance.Yaas.Models.User!) -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        self.user = value
        return self
      }
      public func mergeUser(value:Org.Roylance.Yaas.Models.User) throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        if builderResult.hasUser {
          builderResult.user = try Org.Roylance.Yaas.Models.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
        } else {
          builderResult.user = value
        }
        builderResult.hasUser = true
        return self
      }
      public func clearUser() -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        userBuilder_ = nil
        builderResult.hasUser = false
        builderResult.user = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        builderResult = Org.Roylance.Yaas.Models.UserDevice()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        return try Org.Roylance.Yaas.Models.UserDevice.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.UserDevice {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.UserDevice {
        let returnMe:Org.Roylance.Yaas.Models.UserDevice = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.UserDevice) throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        if other == Org.Roylance.Yaas.Models.UserDevice() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUserDeviceType {
             userDeviceType = other.userDeviceType
        }
        if other.hasUserDeviceToken {
             userDeviceToken = other.userDeviceToken
        }
        if other.hasLastUpdated {
             lastUpdated = other.lastUpdated
        }
        if (other.hasUser) {
            try mergeUser(other.user)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UserDevice.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 16 :
            let valueIntuserDeviceType = try input.readEnum()
            if let enumsuserDeviceType = Org.Roylance.Yaas.Models.UserDeviceType(rawValue:valueIntuserDeviceType){
                 userDeviceType = enumsuserDeviceType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntuserDeviceType))
            }

          case 26 :
            userDeviceToken = try input.readString()

          case 32 :
            lastUpdated = try input.readInt64()

          case 42 :
            let subBuilder:Org.Roylance.Yaas.Models.User.Builder = Org.Roylance.Yaas.Models.User.Builder()
            if hasUser {
              try subBuilder.mergeFrom(user)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            user = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Image : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var actualImage:String = ""

    public private(set) var hasActualImage:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasName {
        try output.writeString(2, value:name)
      }
      if hasActualImage {
        try output.writeString(3, value:actualImage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasActualImage {
        serialize_size += actualImage.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Image> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Image>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Image? {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Image {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Image.Builder {
      return Org.Roylance.Yaas.Models.Image.classBuilder() as! Org.Roylance.Yaas.Models.Image.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Image.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Image.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Image.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Image.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Image.Builder {
      return try Org.Roylance.Yaas.Models.Image.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Image) throws -> Org.Roylance.Yaas.Models.Image.Builder {
      return try Org.Roylance.Yaas.Models.Image.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasActualImage {
        output += "\(indent) actualImage: \(actualImage) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasActualImage {
               hashCode = (hashCode &* 31) &+ actualImage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Image"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Image"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Image.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Image = Org.Roylance.Yaas.Models.Image()
      public func getMessage() -> Org.Roylance.Yaas.Models.Image {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Org.Roylance.Yaas.Models.Image.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Org.Roylance.Yaas.Models.Image.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Org.Roylance.Yaas.Models.Image.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Org.Roylance.Yaas.Models.Image.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasActualImage:Bool {
           get {
                return builderResult.hasActualImage
           }
      }
      public var actualImage:String {
           get {
                return builderResult.actualImage
           }
           set (value) {
               builderResult.hasActualImage = true
               builderResult.actualImage = value
           }
      }
      public func setActualImage(value:String) -> Org.Roylance.Yaas.Models.Image.Builder {
        self.actualImage = value
        return self
      }
      public func clearActualImage() -> Org.Roylance.Yaas.Models.Image.Builder{
           builderResult.hasActualImage = false
           builderResult.actualImage = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Image.Builder {
        builderResult = Org.Roylance.Yaas.Models.Image()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Image.Builder {
        return try Org.Roylance.Yaas.Models.Image.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Image {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Image {
        let returnMe:Org.Roylance.Yaas.Models.Image = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Image) throws -> Org.Roylance.Yaas.Models.Image.Builder {
        if other == Org.Roylance.Yaas.Models.Image() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasActualImage {
             actualImage = other.actualImage
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Image.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Image.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            name = try input.readString()

          case 26 :
            actualImage = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class User : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var userName:String = ""

    public private(set) var hasUserName:Bool = false
    public private(set) var password:String = ""

    public private(set) var hasPassword:Bool = false
    public private(set) var display:String = ""

    public private(set) var hasDisplay:Bool = false
    public private(set) var firstName:String = ""

    public private(set) var hasFirstName:Bool = false
    public private(set) var lastName:String = ""

    public private(set) var hasLastName:Bool = false
    public private(set) var image:Org.Roylance.Yaas.Models.Image!
    public private(set) var hasImage:Bool = false
    private var rolesMemoizedSerializedSize:Int32 = 0
    public private(set) var roles:Array<Org.Roylance.Yaas.Models.UserRole> = Array<Org.Roylance.Yaas.Models.UserRole>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasUserName {
        try output.writeString(2, value:userName)
      }
      if hasPassword {
        try output.writeString(3, value:password)
      }
      if hasDisplay {
        try output.writeString(4, value:display)
      }
      if hasFirstName {
        try output.writeString(5, value:firstName)
      }
      if hasLastName {
        try output.writeString(6, value:lastName)
      }
      if hasImage {
        try output.writeMessage(7, value:image)
      }
      for oneValueOfroles in roles {
          try output.writeEnum(8, value:oneValueOfroles.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasUserName {
        serialize_size += userName.computeStringSize(2)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(3)
      }
      if hasDisplay {
        serialize_size += display.computeStringSize(4)
      }
      if hasFirstName {
        serialize_size += firstName.computeStringSize(5)
      }
      if hasLastName {
        serialize_size += lastName.computeStringSize(6)
      }
      if hasImage {
          if let varSizeimage = image?.computeMessageSize(7) {
              serialize_size += varSizeimage
          }
      }
      var dataSizeroles:Int32 = 0
      for oneValueOfroles in roles {
          dataSizeroles += oneValueOfroles.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeroles
      serialize_size += (1 * Int32(roles.count))
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.User> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.User>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.User? {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.User {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.User.Builder {
      return Org.Roylance.Yaas.Models.User.classBuilder() as! Org.Roylance.Yaas.Models.User.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.User.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.User.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.User.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.User.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.User.Builder {
      return try Org.Roylance.Yaas.Models.User.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.User) throws -> Org.Roylance.Yaas.Models.User.Builder {
      return try Org.Roylance.Yaas.Models.User.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUserName {
        output += "\(indent) userName: \(userName) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if hasDisplay {
        output += "\(indent) display: \(display) \n"
      }
      if hasFirstName {
        output += "\(indent) firstName: \(firstName) \n"
      }
      if hasLastName {
        output += "\(indent) lastName: \(lastName) \n"
      }
      if hasImage {
        output += "\(indent) image {\n"
        if let outDescImage = image {
          output += try outDescImage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var rolesElementIndex:Int = 0
      for oneValueOfroles in roles {
          output += "\(indent) roles[\(rolesElementIndex)]: \(oneValueOfroles.description)\n"
          rolesElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUserName {
               hashCode = (hashCode &* 31) &+ userName.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasDisplay {
               hashCode = (hashCode &* 31) &+ display.hashValue
            }
            if hasFirstName {
               hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasLastName {
               hashCode = (hashCode &* 31) &+ lastName.hashValue
            }
            if hasImage {
                if let hashValueimage = image?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueimage
                }
            }
            for oneValueOfroles in roles {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfroles.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.User"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.User"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.User.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.User = Org.Roylance.Yaas.Models.User()
      public func getMessage() -> Org.Roylance.Yaas.Models.User {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasUserName:Bool {
           get {
                return builderResult.hasUserName
           }
      }
      public var userName:String {
           get {
                return builderResult.userName
           }
           set (value) {
               builderResult.hasUserName = true
               builderResult.userName = value
           }
      }
      public func setUserName(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.userName = value
        return self
      }
      public func clearUserName() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasUserName = false
           builderResult.userName = ""
           return self
      }
      public var hasPassword:Bool {
           get {
                return builderResult.hasPassword
           }
      }
      public var password:String {
           get {
                return builderResult.password
           }
           set (value) {
               builderResult.hasPassword = true
               builderResult.password = value
           }
      }
      public func setPassword(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.password = value
        return self
      }
      public func clearPassword() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasPassword = false
           builderResult.password = ""
           return self
      }
      public var hasDisplay:Bool {
           get {
                return builderResult.hasDisplay
           }
      }
      public var display:String {
           get {
                return builderResult.display
           }
           set (value) {
               builderResult.hasDisplay = true
               builderResult.display = value
           }
      }
      public func setDisplay(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.display = value
        return self
      }
      public func clearDisplay() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasDisplay = false
           builderResult.display = ""
           return self
      }
      public var hasFirstName:Bool {
           get {
                return builderResult.hasFirstName
           }
      }
      public var firstName:String {
           get {
                return builderResult.firstName
           }
           set (value) {
               builderResult.hasFirstName = true
               builderResult.firstName = value
           }
      }
      public func setFirstName(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.firstName = value
        return self
      }
      public func clearFirstName() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasFirstName = false
           builderResult.firstName = ""
           return self
      }
      public var hasLastName:Bool {
           get {
                return builderResult.hasLastName
           }
      }
      public var lastName:String {
           get {
                return builderResult.lastName
           }
           set (value) {
               builderResult.hasLastName = true
               builderResult.lastName = value
           }
      }
      public func setLastName(value:String) -> Org.Roylance.Yaas.Models.User.Builder {
        self.lastName = value
        return self
      }
      public func clearLastName() -> Org.Roylance.Yaas.Models.User.Builder{
           builderResult.hasLastName = false
           builderResult.lastName = ""
           return self
      }
      public var hasImage:Bool {
           get {
               return builderResult.hasImage
           }
      }
      public var image:Org.Roylance.Yaas.Models.Image! {
           get {
               if imageBuilder_ != nil {
                  builderResult.image = imageBuilder_.getMessage()
               }
               return builderResult.image
           }
           set (value) {
               builderResult.hasImage = true
               builderResult.image = value
           }
      }
      private var imageBuilder_:Org.Roylance.Yaas.Models.Image.Builder! {
           didSet {
              builderResult.hasImage = true
           }
      }
      public func getImageBuilder() -> Org.Roylance.Yaas.Models.Image.Builder {
        if imageBuilder_ == nil {
           imageBuilder_ = Org.Roylance.Yaas.Models.Image.Builder()
           builderResult.image = imageBuilder_.getMessage()
           if image != nil {
              try! imageBuilder_.mergeFrom(image)
           }
        }
        return imageBuilder_
      }
      public func setImage(value:Org.Roylance.Yaas.Models.Image!) -> Org.Roylance.Yaas.Models.User.Builder {
        self.image = value
        return self
      }
      public func mergeImage(value:Org.Roylance.Yaas.Models.Image) throws -> Org.Roylance.Yaas.Models.User.Builder {
        if builderResult.hasImage {
          builderResult.image = try Org.Roylance.Yaas.Models.Image.builderWithPrototype(builderResult.image).mergeFrom(value).buildPartial()
        } else {
          builderResult.image = value
        }
        builderResult.hasImage = true
        return self
      }
      public func clearImage() -> Org.Roylance.Yaas.Models.User.Builder {
        imageBuilder_ = nil
        builderResult.hasImage = false
        builderResult.image = nil
        return self
      }
      public var roles:Array<Org.Roylance.Yaas.Models.UserRole> {
          get {
              return builderResult.roles
          }
          set (value) {
              builderResult.roles = value
          }
      }
      public func setRoles(value:Array<Org.Roylance.Yaas.Models.UserRole>) -> Org.Roylance.Yaas.Models.User.Builder {
        self.roles = value
        return self
      }
      public func clearRoles() -> Org.Roylance.Yaas.Models.User.Builder {
        builderResult.roles.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.User.Builder {
        builderResult = Org.Roylance.Yaas.Models.User()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.User.Builder {
        return try Org.Roylance.Yaas.Models.User.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.User {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.User {
        let returnMe:Org.Roylance.Yaas.Models.User = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.User) throws -> Org.Roylance.Yaas.Models.User.Builder {
        if other == Org.Roylance.Yaas.Models.User() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUserName {
             userName = other.userName
        }
        if other.hasPassword {
             password = other.password
        }
        if other.hasDisplay {
             display = other.display
        }
        if other.hasFirstName {
             firstName = other.firstName
        }
        if other.hasLastName {
             lastName = other.lastName
        }
        if (other.hasImage) {
            try mergeImage(other.image)
        }
        if !other.roles.isEmpty {
           builderResult.roles += other.roles
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.User.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.User.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            userName = try input.readString()

          case 26 :
            password = try input.readString()

          case 34 :
            display = try input.readString()

          case 42 :
            firstName = try input.readString()

          case 50 :
            lastName = try input.readString()

          case 58 :
            let subBuilder:Org.Roylance.Yaas.Models.Image.Builder = Org.Roylance.Yaas.Models.Image.Builder()
            if hasImage {
              try subBuilder.mergeFrom(image)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            image = subBuilder.buildPartial()

          case 64 :
            let valueIntroles = try input.readEnum()
            if let enumsroles = Org.Roylance.Yaas.Models.UserRole(rawValue:valueIntroles) {
                 builderResult.roles += [enumsroles]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(8, value:Int64(valueIntroles))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Token : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var issued:Int64 = Int64(0)

    public private(set) var hasIssued:Bool = false
    public private(set) var expiration:Int64 = Int64(0)

    public private(set) var hasExpiration:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasUserId {
        try output.writeString(2, value:userId)
      }
      if hasIssued {
        try output.writeInt64(3, value:issued)
      }
      if hasExpiration {
        try output.writeInt64(4, value:expiration)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(2)
      }
      if hasIssued {
        serialize_size += issued.computeInt64Size(3)
      }
      if hasExpiration {
        serialize_size += expiration.computeInt64Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Token> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Token>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Token? {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Token {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Token.Builder {
      return Org.Roylance.Yaas.Models.Token.classBuilder() as! Org.Roylance.Yaas.Models.Token.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Token.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Token.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Token.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Token.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Token.Builder {
      return try Org.Roylance.Yaas.Models.Token.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Token) throws -> Org.Roylance.Yaas.Models.Token.Builder {
      return try Org.Roylance.Yaas.Models.Token.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasIssued {
        output += "\(indent) issued: \(issued) \n"
      }
      if hasExpiration {
        output += "\(indent) expiration: \(expiration) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasIssued {
               hashCode = (hashCode &* 31) &+ issued.hashValue
            }
            if hasExpiration {
               hashCode = (hashCode &* 31) &+ expiration.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Token"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Token"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Token.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Token = Org.Roylance.Yaas.Models.Token()
      public func getMessage() -> Org.Roylance.Yaas.Models.Token {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Org.Roylance.Yaas.Models.Token.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Org.Roylance.Yaas.Models.Token.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> Org.Roylance.Yaas.Models.Token.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> Org.Roylance.Yaas.Models.Token.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasIssued:Bool {
           get {
                return builderResult.hasIssued
           }
      }
      public var issued:Int64 {
           get {
                return builderResult.issued
           }
           set (value) {
               builderResult.hasIssued = true
               builderResult.issued = value
           }
      }
      public func setIssued(value:Int64) -> Org.Roylance.Yaas.Models.Token.Builder {
        self.issued = value
        return self
      }
      public func clearIssued() -> Org.Roylance.Yaas.Models.Token.Builder{
           builderResult.hasIssued = false
           builderResult.issued = Int64(0)
           return self
      }
      public var hasExpiration:Bool {
           get {
                return builderResult.hasExpiration
           }
      }
      public var expiration:Int64 {
           get {
                return builderResult.expiration
           }
           set (value) {
               builderResult.hasExpiration = true
               builderResult.expiration = value
           }
      }
      public func setExpiration(value:Int64) -> Org.Roylance.Yaas.Models.Token.Builder {
        self.expiration = value
        return self
      }
      public func clearExpiration() -> Org.Roylance.Yaas.Models.Token.Builder{
           builderResult.hasExpiration = false
           builderResult.expiration = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Token.Builder {
        builderResult = Org.Roylance.Yaas.Models.Token()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Token.Builder {
        return try Org.Roylance.Yaas.Models.Token.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Token {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Token {
        let returnMe:Org.Roylance.Yaas.Models.Token = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Token) throws -> Org.Roylance.Yaas.Models.Token.Builder {
        if other == Org.Roylance.Yaas.Models.Token() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasIssued {
             issued = other.issued
        }
        if other.hasExpiration {
             expiration = other.expiration
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Token.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Token.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            userId = try input.readString()

          case 24 :
            issued = try input.readInt64()

          case 32 :
            expiration = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uiauthentication : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var authenticated:Bool = false

    public private(set) var hasAuthenticated:Bool = false
    public private(set) var token:String = ""

    public private(set) var hasToken:Bool = false
    public private(set) var userName:String = ""

    public private(set) var hasUserName:Bool = false
    public private(set) var display:String = ""

    public private(set) var hasDisplay:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasIsAdmin:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasAuthenticated {
        try output.writeBool(1, value:authenticated)
      }
      if hasToken {
        try output.writeString(2, value:token)
      }
      if hasUserName {
        try output.writeString(3, value:userName)
      }
      if hasDisplay {
        try output.writeString(4, value:display)
      }
      if hasIsAdmin {
        try output.writeBool(5, value:isAdmin)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAuthenticated {
        serialize_size += authenticated.computeBoolSize(1)
      }
      if hasToken {
        serialize_size += token.computeStringSize(2)
      }
      if hasUserName {
        serialize_size += userName.computeStringSize(3)
      }
      if hasDisplay {
        serialize_size += display.computeStringSize(4)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Uiauthentication> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Uiauthentication>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentication? {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentication {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
      return Org.Roylance.Yaas.Models.Uiauthentication.classBuilder() as! Org.Roylance.Yaas.Models.Uiauthentication.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Uiauthentication.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiauthentication.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiauthentication.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
      return try Org.Roylance.Yaas.Models.Uiauthentication.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Uiauthentication) throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
      return try Org.Roylance.Yaas.Models.Uiauthentication.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasAuthenticated {
        output += "\(indent) authenticated: \(authenticated) \n"
      }
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasUserName {
        output += "\(indent) userName: \(userName) \n"
      }
      if hasDisplay {
        output += "\(indent) display: \(display) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAuthenticated {
               hashCode = (hashCode &* 31) &+ authenticated.hashValue
            }
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasUserName {
               hashCode = (hashCode &* 31) &+ userName.hashValue
            }
            if hasDisplay {
               hashCode = (hashCode &* 31) &+ display.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiauthentication"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiauthentication"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Uiauthentication.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Uiauthentication = Org.Roylance.Yaas.Models.Uiauthentication()
      public func getMessage() -> Org.Roylance.Yaas.Models.Uiauthentication {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAuthenticated:Bool {
           get {
                return builderResult.hasAuthenticated
           }
      }
      public var authenticated:Bool {
           get {
                return builderResult.authenticated
           }
           set (value) {
               builderResult.hasAuthenticated = true
               builderResult.authenticated = value
           }
      }
      public func setAuthenticated(value:Bool) -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        self.authenticated = value
        return self
      }
      public func clearAuthenticated() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder{
           builderResult.hasAuthenticated = false
           builderResult.authenticated = false
           return self
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      public var hasUserName:Bool {
           get {
                return builderResult.hasUserName
           }
      }
      public var userName:String {
           get {
                return builderResult.userName
           }
           set (value) {
               builderResult.hasUserName = true
               builderResult.userName = value
           }
      }
      public func setUserName(value:String) -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        self.userName = value
        return self
      }
      public func clearUserName() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder{
           builderResult.hasUserName = false
           builderResult.userName = ""
           return self
      }
      public var hasDisplay:Bool {
           get {
                return builderResult.hasDisplay
           }
      }
      public var display:String {
           get {
                return builderResult.display
           }
           set (value) {
               builderResult.hasDisplay = true
               builderResult.display = value
           }
      }
      public func setDisplay(value:String) -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        self.display = value
        return self
      }
      public func clearDisplay() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder{
           builderResult.hasDisplay = false
           builderResult.display = ""
           return self
      }
      public var hasIsAdmin:Bool {
           get {
                return builderResult.hasIsAdmin
           }
      }
      public var isAdmin:Bool {
           get {
                return builderResult.isAdmin
           }
           set (value) {
               builderResult.hasIsAdmin = true
               builderResult.isAdmin = value
           }
      }
      public func setIsAdmin(value:Bool) -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        self.isAdmin = value
        return self
      }
      public func clearIsAdmin() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder{
           builderResult.hasIsAdmin = false
           builderResult.isAdmin = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        builderResult = Org.Roylance.Yaas.Models.Uiauthentication()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        return try Org.Roylance.Yaas.Models.Uiauthentication.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Uiauthentication {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Uiauthentication {
        let returnMe:Org.Roylance.Yaas.Models.Uiauthentication = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Uiauthentication) throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        if other == Org.Roylance.Yaas.Models.Uiauthentication() {
         return self
        }
        if other.hasAuthenticated {
             authenticated = other.authenticated
        }
        if other.hasToken {
             token = other.token
        }
        if other.hasUserName {
             userName = other.userName
        }
        if other.hasDisplay {
             display = other.display
        }
        if other.hasIsAdmin {
             isAdmin = other.isAdmin
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            authenticated = try input.readBool()

          case 18 :
            token = try input.readString()

          case 26 :
            userName = try input.readString()

          case 34 :
            display = try input.readString()

          case 40 :
            isAdmin = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class UichangePassword : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userName:String = ""

    public private(set) var hasUserName:Bool = false
    public private(set) var oldPassword:String = ""

    public private(set) var hasOldPassword:Bool = false
    public private(set) var newPassword:String = ""

    public private(set) var hasNewPassword:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUserName {
        try output.writeString(1, value:userName)
      }
      if hasOldPassword {
        try output.writeString(2, value:oldPassword)
      }
      if hasNewPassword {
        try output.writeString(3, value:newPassword)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserName {
        serialize_size += userName.computeStringSize(1)
      }
      if hasOldPassword {
        serialize_size += oldPassword.computeStringSize(2)
      }
      if hasNewPassword {
        serialize_size += newPassword.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.UichangePassword> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.UichangePassword>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.UichangePassword? {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UichangePassword {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
      return Org.Roylance.Yaas.Models.UichangePassword.classBuilder() as! Org.Roylance.Yaas.Models.UichangePassword.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.UichangePassword.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.UichangePassword.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.UichangePassword.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
      return try Org.Roylance.Yaas.Models.UichangePassword.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.UichangePassword) throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
      return try Org.Roylance.Yaas.Models.UichangePassword.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUserName {
        output += "\(indent) userName: \(userName) \n"
      }
      if hasOldPassword {
        output += "\(indent) oldPassword: \(oldPassword) \n"
      }
      if hasNewPassword {
        output += "\(indent) newPassword: \(newPassword) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserName {
               hashCode = (hashCode &* 31) &+ userName.hashValue
            }
            if hasOldPassword {
               hashCode = (hashCode &* 31) &+ oldPassword.hashValue
            }
            if hasNewPassword {
               hashCode = (hashCode &* 31) &+ newPassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.UichangePassword"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.UichangePassword"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.UichangePassword.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.UichangePassword = Org.Roylance.Yaas.Models.UichangePassword()
      public func getMessage() -> Org.Roylance.Yaas.Models.UichangePassword {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUserName:Bool {
           get {
                return builderResult.hasUserName
           }
      }
      public var userName:String {
           get {
                return builderResult.userName
           }
           set (value) {
               builderResult.hasUserName = true
               builderResult.userName = value
           }
      }
      public func setUserName(value:String) -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        self.userName = value
        return self
      }
      public func clearUserName() -> Org.Roylance.Yaas.Models.UichangePassword.Builder{
           builderResult.hasUserName = false
           builderResult.userName = ""
           return self
      }
      public var hasOldPassword:Bool {
           get {
                return builderResult.hasOldPassword
           }
      }
      public var oldPassword:String {
           get {
                return builderResult.oldPassword
           }
           set (value) {
               builderResult.hasOldPassword = true
               builderResult.oldPassword = value
           }
      }
      public func setOldPassword(value:String) -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        self.oldPassword = value
        return self
      }
      public func clearOldPassword() -> Org.Roylance.Yaas.Models.UichangePassword.Builder{
           builderResult.hasOldPassword = false
           builderResult.oldPassword = ""
           return self
      }
      public var hasNewPassword:Bool {
           get {
                return builderResult.hasNewPassword
           }
      }
      public var newPassword:String {
           get {
                return builderResult.newPassword
           }
           set (value) {
               builderResult.hasNewPassword = true
               builderResult.newPassword = value
           }
      }
      public func setNewPassword(value:String) -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        self.newPassword = value
        return self
      }
      public func clearNewPassword() -> Org.Roylance.Yaas.Models.UichangePassword.Builder{
           builderResult.hasNewPassword = false
           builderResult.newPassword = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        builderResult = Org.Roylance.Yaas.Models.UichangePassword()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        return try Org.Roylance.Yaas.Models.UichangePassword.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.UichangePassword {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.UichangePassword {
        let returnMe:Org.Roylance.Yaas.Models.UichangePassword = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.UichangePassword) throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        if other == Org.Roylance.Yaas.Models.UichangePassword() {
         return self
        }
        if other.hasUserName {
             userName = other.userName
        }
        if other.hasOldPassword {
             oldPassword = other.oldPassword
        }
        if other.hasNewPassword {
             newPassword = other.newPassword
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.UichangePassword.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userName = try input.readString()

          case 18 :
            oldPassword = try input.readString()

          case 26 :
            newPassword = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uirequest : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var token:String = ""

    public private(set) var hasToken:Bool = false
    public private(set) var content:String = ""

    public private(set) var hasContent:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasToken {
        try output.writeString(1, value:token)
      }
      if hasContent {
        try output.writeString(2, value:content)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasToken {
        serialize_size += token.computeStringSize(1)
      }
      if hasContent {
        serialize_size += content.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Uirequest> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Uirequest>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uirequest? {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uirequest {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Uirequest.Builder {
      return Org.Roylance.Yaas.Models.Uirequest.classBuilder() as! Org.Roylance.Yaas.Models.Uirequest.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Uirequest.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Uirequest.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uirequest.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uirequest.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
      return try Org.Roylance.Yaas.Models.Uirequest.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Uirequest) throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
      return try Org.Roylance.Yaas.Models.Uirequest.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasContent {
        output += "\(indent) content: \(content) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasContent {
               hashCode = (hashCode &* 31) &+ content.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Uirequest"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Uirequest"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Uirequest.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Uirequest = Org.Roylance.Yaas.Models.Uirequest()
      public func getMessage() -> Org.Roylance.Yaas.Models.Uirequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> Org.Roylance.Yaas.Models.Uirequest.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      public var hasContent:Bool {
           get {
                return builderResult.hasContent
           }
      }
      public var content:String {
           get {
                return builderResult.content
           }
           set (value) {
               builderResult.hasContent = true
               builderResult.content = value
           }
      }
      public func setContent(value:String) -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        self.content = value
        return self
      }
      public func clearContent() -> Org.Roylance.Yaas.Models.Uirequest.Builder{
           builderResult.hasContent = false
           builderResult.content = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        builderResult = Org.Roylance.Yaas.Models.Uirequest()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        return try Org.Roylance.Yaas.Models.Uirequest.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Uirequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Uirequest {
        let returnMe:Org.Roylance.Yaas.Models.Uirequest = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Uirequest) throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        if other == Org.Roylance.Yaas.Models.Uirequest() {
         return self
        }
        if other.hasToken {
             token = other.token
        }
        if other.hasContent {
             content = other.content
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uirequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            token = try input.readString()

          case 18 :
            content = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uiresponse : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var authenticated:Bool = false

    public private(set) var hasAuthenticated:Bool = false
    public private(set) var errorMessage:String = ""

    public private(set) var hasErrorMessage:Bool = false
    public private(set) var successful:Bool = false

    public private(set) var hasSuccessful:Bool = false
    public private(set) var content:String = ""

    public private(set) var hasContent:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var user:Org.Roylance.Yaas.Models.Uiauthentication!
    public private(set) var hasUser:Bool = false
    public private(set) var users:Org.Roylance.Yaas.Models.Uiauthentications!
    public private(set) var hasUsers:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasAuthenticated {
        try output.writeBool(1, value:authenticated)
      }
      if hasErrorMessage {
        try output.writeString(2, value:errorMessage)
      }
      if hasSuccessful {
        try output.writeBool(3, value:successful)
      }
      if hasContent {
        try output.writeString(4, value:content)
      }
      if hasIsAdmin {
        try output.writeBool(5, value:isAdmin)
      }
      if hasUser {
        try output.writeMessage(6, value:user)
      }
      if hasUsers {
        try output.writeMessage(7, value:users)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAuthenticated {
        serialize_size += authenticated.computeBoolSize(1)
      }
      if hasErrorMessage {
        serialize_size += errorMessage.computeStringSize(2)
      }
      if hasSuccessful {
        serialize_size += successful.computeBoolSize(3)
      }
      if hasContent {
        serialize_size += content.computeStringSize(4)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(5)
      }
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(6) {
              serialize_size += varSizeuser
          }
      }
      if hasUsers {
          if let varSizeusers = users?.computeMessageSize(7) {
              serialize_size += varSizeusers
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Uiresponse> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Uiresponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiresponse? {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiresponse {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
      return Org.Roylance.Yaas.Models.Uiresponse.classBuilder() as! Org.Roylance.Yaas.Models.Uiresponse.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Uiresponse.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiresponse.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiresponse.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
      return try Org.Roylance.Yaas.Models.Uiresponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Uiresponse) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
      return try Org.Roylance.Yaas.Models.Uiresponse.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasAuthenticated {
        output += "\(indent) authenticated: \(authenticated) \n"
      }
      if hasErrorMessage {
        output += "\(indent) errorMessage: \(errorMessage) \n"
      }
      if hasSuccessful {
        output += "\(indent) successful: \(successful) \n"
      }
      if hasContent {
        output += "\(indent) content: \(content) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasUser {
        output += "\(indent) user {\n"
        if let outDescUser = user {
          output += try outDescUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasUsers {
        output += "\(indent) users {\n"
        if let outDescUsers = users {
          output += try outDescUsers.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAuthenticated {
               hashCode = (hashCode &* 31) &+ authenticated.hashValue
            }
            if hasErrorMessage {
               hashCode = (hashCode &* 31) &+ errorMessage.hashValue
            }
            if hasSuccessful {
               hashCode = (hashCode &* 31) &+ successful.hashValue
            }
            if hasContent {
               hashCode = (hashCode &* 31) &+ content.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasUsers {
                if let hashValueusers = users?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueusers
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiresponse"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiresponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Uiresponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Uiresponse = Org.Roylance.Yaas.Models.Uiresponse()
      public func getMessage() -> Org.Roylance.Yaas.Models.Uiresponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAuthenticated:Bool {
           get {
                return builderResult.hasAuthenticated
           }
      }
      public var authenticated:Bool {
           get {
                return builderResult.authenticated
           }
           set (value) {
               builderResult.hasAuthenticated = true
               builderResult.authenticated = value
           }
      }
      public func setAuthenticated(value:Bool) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.authenticated = value
        return self
      }
      public func clearAuthenticated() -> Org.Roylance.Yaas.Models.Uiresponse.Builder{
           builderResult.hasAuthenticated = false
           builderResult.authenticated = false
           return self
      }
      public var hasErrorMessage:Bool {
           get {
                return builderResult.hasErrorMessage
           }
      }
      public var errorMessage:String {
           get {
                return builderResult.errorMessage
           }
           set (value) {
               builderResult.hasErrorMessage = true
               builderResult.errorMessage = value
           }
      }
      public func setErrorMessage(value:String) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.errorMessage = value
        return self
      }
      public func clearErrorMessage() -> Org.Roylance.Yaas.Models.Uiresponse.Builder{
           builderResult.hasErrorMessage = false
           builderResult.errorMessage = ""
           return self
      }
      public var hasSuccessful:Bool {
           get {
                return builderResult.hasSuccessful
           }
      }
      public var successful:Bool {
           get {
                return builderResult.successful
           }
           set (value) {
               builderResult.hasSuccessful = true
               builderResult.successful = value
           }
      }
      public func setSuccessful(value:Bool) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.successful = value
        return self
      }
      public func clearSuccessful() -> Org.Roylance.Yaas.Models.Uiresponse.Builder{
           builderResult.hasSuccessful = false
           builderResult.successful = false
           return self
      }
      public var hasContent:Bool {
           get {
                return builderResult.hasContent
           }
      }
      public var content:String {
           get {
                return builderResult.content
           }
           set (value) {
               builderResult.hasContent = true
               builderResult.content = value
           }
      }
      public func setContent(value:String) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.content = value
        return self
      }
      public func clearContent() -> Org.Roylance.Yaas.Models.Uiresponse.Builder{
           builderResult.hasContent = false
           builderResult.content = ""
           return self
      }
      public var hasIsAdmin:Bool {
           get {
                return builderResult.hasIsAdmin
           }
      }
      public var isAdmin:Bool {
           get {
                return builderResult.isAdmin
           }
           set (value) {
               builderResult.hasIsAdmin = true
               builderResult.isAdmin = value
           }
      }
      public func setIsAdmin(value:Bool) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.isAdmin = value
        return self
      }
      public func clearIsAdmin() -> Org.Roylance.Yaas.Models.Uiresponse.Builder{
           builderResult.hasIsAdmin = false
           builderResult.isAdmin = false
           return self
      }
      public var hasUser:Bool {
           get {
               return builderResult.hasUser
           }
      }
      public var user:Org.Roylance.Yaas.Models.Uiauthentication! {
           get {
               if userBuilder_ != nil {
                  builderResult.user = userBuilder_.getMessage()
               }
               return builderResult.user
           }
           set (value) {
               builderResult.hasUser = true
               builderResult.user = value
           }
      }
      private var userBuilder_:Org.Roylance.Yaas.Models.Uiauthentication.Builder! {
           didSet {
              builderResult.hasUser = true
           }
      }
      public func getUserBuilder() -> Org.Roylance.Yaas.Models.Uiauthentication.Builder {
        if userBuilder_ == nil {
           userBuilder_ = Org.Roylance.Yaas.Models.Uiauthentication.Builder()
           builderResult.user = userBuilder_.getMessage()
           if user != nil {
              try! userBuilder_.mergeFrom(user)
           }
        }
        return userBuilder_
      }
      public func setUser(value:Org.Roylance.Yaas.Models.Uiauthentication!) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.user = value
        return self
      }
      public func mergeUser(value:Org.Roylance.Yaas.Models.Uiauthentication) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        if builderResult.hasUser {
          builderResult.user = try Org.Roylance.Yaas.Models.Uiauthentication.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
        } else {
          builderResult.user = value
        }
        builderResult.hasUser = true
        return self
      }
      public func clearUser() -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        userBuilder_ = nil
        builderResult.hasUser = false
        builderResult.user = nil
        return self
      }
      public var hasUsers:Bool {
           get {
               return builderResult.hasUsers
           }
      }
      public var users:Org.Roylance.Yaas.Models.Uiauthentications! {
           get {
               if usersBuilder_ != nil {
                  builderResult.users = usersBuilder_.getMessage()
               }
               return builderResult.users
           }
           set (value) {
               builderResult.hasUsers = true
               builderResult.users = value
           }
      }
      private var usersBuilder_:Org.Roylance.Yaas.Models.Uiauthentications.Builder! {
           didSet {
              builderResult.hasUsers = true
           }
      }
      public func getUsersBuilder() -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        if usersBuilder_ == nil {
           usersBuilder_ = Org.Roylance.Yaas.Models.Uiauthentications.Builder()
           builderResult.users = usersBuilder_.getMessage()
           if users != nil {
              try! usersBuilder_.mergeFrom(users)
           }
        }
        return usersBuilder_
      }
      public func setUsers(value:Org.Roylance.Yaas.Models.Uiauthentications!) -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        self.users = value
        return self
      }
      public func mergeUsers(value:Org.Roylance.Yaas.Models.Uiauthentications) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        if builderResult.hasUsers {
          builderResult.users = try Org.Roylance.Yaas.Models.Uiauthentications.builderWithPrototype(builderResult.users).mergeFrom(value).buildPartial()
        } else {
          builderResult.users = value
        }
        builderResult.hasUsers = true
        return self
      }
      public func clearUsers() -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        usersBuilder_ = nil
        builderResult.hasUsers = false
        builderResult.users = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        builderResult = Org.Roylance.Yaas.Models.Uiresponse()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        return try Org.Roylance.Yaas.Models.Uiresponse.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Uiresponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Uiresponse {
        let returnMe:Org.Roylance.Yaas.Models.Uiresponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Uiresponse) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        if other == Org.Roylance.Yaas.Models.Uiresponse() {
         return self
        }
        if other.hasAuthenticated {
             authenticated = other.authenticated
        }
        if other.hasErrorMessage {
             errorMessage = other.errorMessage
        }
        if other.hasSuccessful {
             successful = other.successful
        }
        if other.hasContent {
             content = other.content
        }
        if other.hasIsAdmin {
             isAdmin = other.isAdmin
        }
        if (other.hasUser) {
            try mergeUser(other.user)
        }
        if (other.hasUsers) {
            try mergeUsers(other.users)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiresponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            authenticated = try input.readBool()

          case 18 :
            errorMessage = try input.readString()

          case 24 :
            successful = try input.readBool()

          case 34 :
            content = try input.readString()

          case 40 :
            isAdmin = try input.readBool()

          case 50 :
            let subBuilder:Org.Roylance.Yaas.Models.Uiauthentication.Builder = Org.Roylance.Yaas.Models.Uiauthentication.Builder()
            if hasUser {
              try subBuilder.mergeFrom(user)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            user = subBuilder.buildPartial()

          case 58 :
            let subBuilder:Org.Roylance.Yaas.Models.Uiauthentications.Builder = Org.Roylance.Yaas.Models.Uiauthentications.Builder()
            if hasUsers {
              try subBuilder.mergeFrom(users)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            users = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uiauthentications : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var users:Array<Org.Roylance.Yaas.Models.Uiauthentication>  = Array<Org.Roylance.Yaas.Models.Uiauthentication>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementusers in users {
          try output.writeMessage(1, value:oneElementusers)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementusers in users {
          serialize_size += oneElementusers.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Org.Roylance.Yaas.Models.Uiauthentications> {
      var mergedArray = Array<Org.Roylance.Yaas.Models.Uiauthentications>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentications? {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromData(data, extensionRegistry:Org.Roylance.Yaas.Models.YaasModelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentications {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
      return Org.Roylance.Yaas.Models.Uiauthentications.classBuilder() as! Org.Roylance.Yaas.Models.Uiauthentications.Builder
    }
    public func getBuilder() -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
      return classBuilder() as! Org.Roylance.Yaas.Models.Uiauthentications.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiauthentications.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Org.Roylance.Yaas.Models.Uiauthentications.Builder()
    }
    public func toBuilder() throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
      return try Org.Roylance.Yaas.Models.Uiauthentications.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Org.Roylance.Yaas.Models.Uiauthentications) throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
      return try Org.Roylance.Yaas.Models.Uiauthentications.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var usersElementIndex:Int = 0
      for oneElementusers in users {
          output += "\(indent) users[\(usersElementIndex)] {\n"
          output += try oneElementusers.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          usersElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementusers in users {
                hashCode = (hashCode &* 31) &+ oneElementusers.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiauthentications"
    }
    override public func className() -> String {
        return "Org.Roylance.Yaas.Models.Uiauthentications"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Org.Roylance.Yaas.Models.Uiauthentications.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Org.Roylance.Yaas.Models.Uiauthentications = Org.Roylance.Yaas.Models.Uiauthentications()
      public func getMessage() -> Org.Roylance.Yaas.Models.Uiauthentications {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var users:Array<Org.Roylance.Yaas.Models.Uiauthentication> {
           get {
               return builderResult.users
           }
           set (value) {
               builderResult.users = value
           }
      }
      public func setUsers(value:Array<Org.Roylance.Yaas.Models.Uiauthentication>) -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        self.users = value
        return self
      }
      public func clearUsers() -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        builderResult.users.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        builderResult = Org.Roylance.Yaas.Models.Uiauthentications()
        return self
      }
      public override func clone() throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        return try Org.Roylance.Yaas.Models.Uiauthentications.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Org.Roylance.Yaas.Models.Uiauthentications {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Org.Roylance.Yaas.Models.Uiauthentications {
        let returnMe:Org.Roylance.Yaas.Models.Uiauthentications = builderResult
        return returnMe
      }
      public func mergeFrom(other:Org.Roylance.Yaas.Models.Uiauthentications) throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        if other == Org.Roylance.Yaas.Models.Uiauthentications() {
         return self
        }
        if !other.users.isEmpty  {
           builderResult.users += other.users
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Org.Roylance.Yaas.Models.Uiauthentications.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Org.Roylance.Yaas.Models.Uiauthentication.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            users += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
